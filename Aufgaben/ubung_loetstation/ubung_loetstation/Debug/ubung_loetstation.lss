
ubung_loetstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800200  00000f50  00000fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  0080028e  0080028e  00001072  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026d8  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fea  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001733  00000000  00000000  000049c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000694  00000000  00000000  000060f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d47  00000000  00000000  0000678c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000205f  00000000  00000000  000074d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00009532  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c4       	rjmp	.+2134   	; 0x8b4 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e5       	ldi	r30, 0x50	; 80
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 38       	cpi	r26, 0x8E	; 142
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ae e8       	ldi	r26, 0x8E	; 142
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	15 c7       	rjmp	.+3626   	; 0xf4c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define     SYSTEMTAKT      5    
#define     BLINKPERIOD     2000


int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	6b 97       	sbiw	r28, 0x1b	; 27
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
    typedef enum zustand_t{aus, ein, err}
    zustand_t;
    
    const uint8_t gray_to_dez[16]={
 138:	80 e1       	ldi	r24, 0x10	; 16
 13a:	e0 e0       	ldi	r30, 0x00	; 0
 13c:	f2 e0       	ldi	r31, 0x02	; 2
 13e:	de 01       	movw	r26, r28
 140:	11 96       	adiw	r26, 0x01	; 1
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	8a 95       	dec	r24
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x1e>
        8,
        9,
        11,
        10
    };
    const uint8_t dez_to_display[11]={
 14a:	8b e0       	ldi	r24, 0x0B	; 11
 14c:	e0 e1       	ldi	r30, 0x10	; 16
 14e:	f2 e0       	ldi	r31, 0x02	; 2
 150:	de 01       	movw	r26, r28
 152:	51 96       	adiw	r26, 0x11	; 17
 154:	01 90       	ld	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	8a 95       	dec	r24
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x30>
    uint8_t output=0;
    uint8_t control=0;
    
    zustand_t zustand=aus;
    
    initBoard(0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	44 d2       	rcall	.+1160   	; 0x5e8 <initBoard>
    uint16_t blinktimer=0;
    uint8_t inpow=0;
    uint8_t output=0;
    uint8_t control=0;
    
    zustand_t zustand=aus;
 160:	c1 2c       	mov	r12, r1
    uint8_t goaltemp=0;
    uint8_t flagofftime=0;
    uint8_t flagblink=0;
    uint16_t blinktimer=0;
    uint8_t inpow=0;
    uint8_t output=0;
 162:	d1 2c       	mov	r13, r1
    uint8_t intemp=0;
    uint8_t istemp=0;
    uint8_t goaltemp=0;
    uint8_t flagofftime=0;
    uint8_t flagblink=0;
    uint16_t blinktimer=0;
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t temperaturead=0;
    uint8_t intemp=0;
    uint8_t istemp=0;
    uint8_t goaltemp=0;
    uint8_t flagofftime=0;
    uint8_t flagblink=0;
 168:	a1 2c       	mov	r10, r1
    uint8_t up=0;
    uint8_t down=0;
    uint8_t temperaturead=0;
    uint8_t intemp=0;
    uint8_t istemp=0;
    uint8_t goaltemp=0;
 16a:	b1 2c       	mov	r11, r1
    
    while (1) 
    {
//Eingabe

        swin=switchReadAll();
 16c:	f1 2c       	mov	r15, r1
 16e:	c8 d0       	rcall	.+400    	; 0x300 <switchReadAll>
        temperaturead=swin&IMTEMP;
 170:	28 2f       	mov	r18, r24
 172:	2f 70       	andi	r18, 0x0F	; 15
 174:	82 2e       	mov	r8, r18
        inpow=swin&IMPOW;
 176:	80 78       	andi	r24, 0x80	; 128
        altin=tin;
        tin=buttonReadAllPL()&MTIN;
 178:	e8 2e       	mov	r14, r24
 17a:	c4 d0       	rcall	.+392    	; 0x304 <buttonReadAllPL>
 17c:	80 7c       	andi	r24, 0xC0	; 192
 17e:	98 2e       	mov	r9, r24
        flank=tin^altin;
 180:	9f 2d       	mov	r25, r15
 182:	98 27       	eor	r25, r24
        flankneg=flank&altin;
 184:	9f 21       	and	r25, r15
        up=flankneg&IMUP;
 186:	39 2f       	mov	r19, r25
 188:	30 74       	andi	r19, 0x40	; 64
        down=flankneg&IMDOWN;
 18a:	90 78       	andi	r25, 0x80	; 128
        intemp=gray_to_dez[temperaturead];
 18c:	e1 e0       	ldi	r30, 0x01	; 1
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ec 0f       	add	r30, r28
 192:	fd 1f       	adc	r31, r29
 194:	e8 0d       	add	r30, r8
 196:	f1 1d       	adc	r31, r1
 198:	80 81       	ld	r24, Z
        istemp=intemp+28;
 19a:	2c e1       	ldi	r18, 0x1C	; 28
 19c:	28 0f       	add	r18, r24
        
//Verarbeitung

        if (blinktimer>BLINKPERIOD)
 19e:	01 3d       	cpi	r16, 0xD1	; 209
 1a0:	47 e0       	ldi	r20, 0x07	; 7
 1a2:	14 07       	cpc	r17, r20
 1a4:	10 f0       	brcs	.+4      	; 0x1aa <main+0x86>
        {
            blinktimer=0;
 1a6:	00 e0       	ldi	r16, 0x00	; 0
 1a8:	10 e0       	ldi	r17, 0x00	; 0
        }
        if (!inpow)
 1aa:	e1 10       	cpse	r14, r1
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <main+0x8c>
        {
            zustand=aus;
 1ae:	c1 2c       	mov	r12, r1
        }
        switch (zustand)
 1b0:	51 e0       	ldi	r21, 0x01	; 1
 1b2:	c5 16       	cp	r12, r21
 1b4:	39 f1       	breq	.+78     	; 0x204 <main+0xe0>
 1b6:	c5 16       	cp	r12, r21
 1b8:	20 f0       	brcs	.+8      	; 0x1c2 <main+0x9e>
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	c9 16       	cp	r12, r25
 1be:	99 f0       	breq	.+38     	; 0x1e6 <main+0xc2>
 1c0:	68 c0       	rjmp	.+208    	; 0x292 <main+0x16e>
        {
            case aus:
            output=0;
            if (inpow)
 1c2:	ee 20       	and	r14, r14
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <main+0xa4>
 1c6:	51 c0       	rjmp	.+162    	; 0x26a <main+0x146>
            {
                goaltemp=35;
                output=output|OMPOW;
                blinktimer=0;
                if (intemp)
 1c8:	88 23       	and	r24, r24
 1ca:	09 f4       	brne	.+2      	; 0x1ce <main+0xaa>
 1cc:	50 c0       	rjmp	.+160    	; 0x26e <main+0x14a>
                {
                    zustand=ein;
 1ce:	cc 24       	eor	r12, r12
 1d0:	c3 94       	inc	r12
            case aus:
            output=0;
            if (inpow)
            {
                goaltemp=35;
                output=output|OMPOW;
 1d2:	68 94       	set
 1d4:	dd 24       	eor	r13, r13
 1d6:	d7 f8       	bld	r13, 7
                blinktimer=0;
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
        {
            case aus:
            output=0;
            if (inpow)
            {
                goaltemp=35;
 1dc:	0f 2e       	mov	r0, r31
 1de:	f3 e2       	ldi	r31, 0x23	; 35
 1e0:	bf 2e       	mov	r11, r31
 1e2:	f0 2d       	mov	r31, r0
 1e4:	56 c0       	rjmp	.+172    	; 0x292 <main+0x16e>
                }
            }
            break;
            
            case err:
            output=output&~OMHEAT;
 1e6:	9d 2d       	mov	r25, r13
 1e8:	9f 7b       	andi	r25, 0xBF	; 191
            if (blinktimer>(BLINKPERIOD/2))
 1ea:	09 3e       	cpi	r16, 0xE9	; 233
 1ec:	23 e0       	ldi	r18, 0x03	; 3
 1ee:	12 07       	cpc	r17, r18
 1f0:	20 f0       	brcs	.+8      	; 0x1fa <main+0xd6>
            {
                output=output&~OMTEMP;
 1f2:	3d 2d       	mov	r19, r13
 1f4:	30 78       	andi	r19, 0x80	; 128
 1f6:	d3 2e       	mov	r13, r19
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <main+0xda>
            } 
            else
            {
                output=output|OMTEMP;
 1fa:	9f 63       	ori	r25, 0x3F	; 63
 1fc:	d9 2e       	mov	r13, r25
            }
            if (intemp)
 1fe:	81 11       	cpse	r24, r1
 200:	44 c0       	rjmp	.+136    	; 0x28a <main+0x166>
 202:	47 c0       	rjmp	.+142    	; 0x292 <main+0x16e>
                zustand=ein;
            }
            break;
            
            case ein:
            if ((goaltemp<41)&&up)
 204:	48 e2       	ldi	r20, 0x28	; 40
 206:	4b 15       	cp	r20, r11
 208:	10 f0       	brcs	.+4      	; 0x20e <main+0xea>
 20a:	31 11       	cpse	r19, r1
            {
                goaltemp=goaltemp+1;
 20c:	b3 94       	inc	r11
            }
            if ((goaltemp>31)&&down)
 20e:	5f e1       	ldi	r21, 0x1F	; 31
 210:	5b 15       	cp	r21, r11
 212:	10 f4       	brcc	.+4      	; 0x218 <main+0xf4>
 214:	91 11       	cpse	r25, r1
            {
                goaltemp=goaltemp-1;
 216:	ba 94       	dec	r11
            }
            if (goaltemp==istemp)
 218:	b2 12       	cpse	r11, r18
 21a:	04 c0       	rjmp	.+8      	; 0x224 <main+0x100>
            {
                flagblink=0;
                blinktimer=0;
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	10 e0       	ldi	r17, 0x00	; 0
            {
                goaltemp=goaltemp-1;
            }
            if (goaltemp==istemp)
            {
                flagblink=0;
 220:	a1 2c       	mov	r10, r1
 222:	02 c0       	rjmp	.+4      	; 0x228 <main+0x104>
                blinktimer=0;
            } 
            else
            {
                flagblink=1;
 224:	aa 24       	eor	r10, r10
 226:	a3 94       	inc	r10
            }
            output=output|(OMTEMP&dez_to_display[goaltemp-31]);
 228:	eb 2d       	mov	r30, r11
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	7f 97       	sbiw	r30, 0x1f	; 31
 22e:	41 e1       	ldi	r20, 0x11	; 17
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	4c 0f       	add	r20, r28
 234:	5d 1f       	adc	r21, r29
 236:	e4 0f       	add	r30, r20
 238:	f5 1f       	adc	r31, r21
 23a:	90 81       	ld	r25, Z
 23c:	9f 73       	andi	r25, 0x3F	; 63
 23e:	d9 2a       	or	r13, r25
            output=output&(0xc0+(OMTEMP&dez_to_display[goaltemp-31]));
 240:	90 54       	subi	r25, 0x40	; 64
 242:	9d 21       	and	r25, r13
            if (goaltemp>istemp)
 244:	2b 15       	cp	r18, r11
 246:	18 f4       	brcc	.+6      	; 0x24e <main+0x12a>
            {
                output=output|OMHEAT;
 248:	90 64       	ori	r25, 0x40	; 64
 24a:	d9 2e       	mov	r13, r25
 24c:	02 c0       	rjmp	.+4      	; 0x252 <main+0x12e>
            }
            else
            {
                output=output&~OMHEAT;
 24e:	9f 7b       	andi	r25, 0xBF	; 191
 250:	d9 2e       	mov	r13, r25
            }       
            if (!intemp)
 252:	81 11       	cpse	r24, r1
 254:	1e c0       	rjmp	.+60     	; 0x292 <main+0x16e>
            {
                flagblink=0;
                blinktimer=0;
                output=output&~OMHEAT;
 256:	5d 2d       	mov	r21, r13
 258:	5f 7b       	andi	r21, 0xBF	; 191
 25a:	d5 2e       	mov	r13, r21
                zustand=err;
 25c:	68 94       	set
 25e:	cc 24       	eor	r12, r12
 260:	c1 f8       	bld	r12, 1
                output=output&~OMHEAT;
            }       
            if (!intemp)
            {
                flagblink=0;
                blinktimer=0;
 262:	00 e0       	ldi	r16, 0x00	; 0
 264:	10 e0       	ldi	r17, 0x00	; 0
            {
                output=output&~OMHEAT;
            }       
            if (!intemp)
            {
                flagblink=0;
 266:	a1 2c       	mov	r10, r1
 268:	14 c0       	rjmp	.+40     	; 0x292 <main+0x16e>
            zustand=aus;
        }
        switch (zustand)
        {
            case aus:
            output=0;
 26a:	d1 2c       	mov	r13, r1
 26c:	12 c0       	rjmp	.+36     	; 0x292 <main+0x16e>
                    zustand=ein;
                } 
                else
                {
                    flagblink=0;
                    zustand=err;
 26e:	68 94       	set
 270:	cc 24       	eor	r12, r12
 272:	c1 f8       	bld	r12, 1
            case aus:
            output=0;
            if (inpow)
            {
                goaltemp=35;
                output=output|OMPOW;
 274:	68 94       	set
 276:	dd 24       	eor	r13, r13
 278:	d7 f8       	bld	r13, 7
                blinktimer=0;
 27a:	00 e0       	ldi	r16, 0x00	; 0
 27c:	10 e0       	ldi	r17, 0x00	; 0
                {
                    zustand=ein;
                } 
                else
                {
                    flagblink=0;
 27e:	a1 2c       	mov	r10, r1
        {
            case aus:
            output=0;
            if (inpow)
            {
                goaltemp=35;
 280:	0f 2e       	mov	r0, r31
 282:	f3 e2       	ldi	r31, 0x23	; 35
 284:	bf 2e       	mov	r11, r31
 286:	f0 2d       	mov	r31, r0
 288:	04 c0       	rjmp	.+8      	; 0x292 <main+0x16e>
                output=output|OMTEMP;
            }
            if (intemp)
            {
                blinktimer=0;
                zustand=ein;
 28a:	cc 24       	eor	r12, r12
 28c:	c3 94       	inc	r12
            {
                output=output|OMTEMP;
            }
            if (intemp)
            {
                blinktimer=0;
 28e:	00 e0       	ldi	r16, 0x00	; 0
 290:	10 e0       	ldi	r17, 0x00	; 0
                output=output&~OMHEAT;
                zustand=err;
            }                        
            break;
        }
        if ((blinktimer%(BLINKPERIOD/4))>(BLINKPERIOD/8))
 292:	98 01       	movw	r18, r16
 294:	36 95       	lsr	r19
 296:	27 95       	ror	r18
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	a5 ec       	ldi	r26, 0xC5	; 197
 29e:	b0 e2       	ldi	r27, 0x20	; 32
 2a0:	55 d3       	rcall	.+1706   	; 0x94c <__umulhisi3>
 2a2:	92 95       	swap	r25
 2a4:	82 95       	swap	r24
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	89 27       	eor	r24, r25
 2aa:	9f 70       	andi	r25, 0x0F	; 15
 2ac:	89 27       	eor	r24, r25
 2ae:	44 ef       	ldi	r20, 0xF4	; 244
 2b0:	51 e0       	ldi	r21, 0x01	; 1
 2b2:	84 9f       	mul	r24, r20
 2b4:	90 01       	movw	r18, r0
 2b6:	85 9f       	mul	r24, r21
 2b8:	30 0d       	add	r19, r0
 2ba:	94 9f       	mul	r25, r20
 2bc:	30 0d       	add	r19, r0
 2be:	11 24       	eor	r1, r1
 2c0:	c8 01       	movw	r24, r16
 2c2:	82 1b       	sub	r24, r18
 2c4:	93 0b       	sbc	r25, r19
 2c6:	8b 3f       	cpi	r24, 0xFB	; 251
 2c8:	91 05       	cpc	r25, r1
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <main+0x1ac>
        {
            flagofftime=1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <main+0x1ae>
        } 
        else
        {
            flagofftime=0;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
        }
        if (flagofftime&&flagblink)
 2d2:	88 23       	and	r24, r24
 2d4:	29 f0       	breq	.+10     	; 0x2e0 <main+0x1bc>
 2d6:	aa 20       	and	r10, r10
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <main+0x1bc>
        {
            output=output&~OMTEMP;
 2da:	8d 2d       	mov	r24, r13
 2dc:	80 7c       	andi	r24, 0xC0	; 192
        }
        
//Ausgabe

        ledWriteAll(output);
 2de:	d8 2e       	mov	r13, r24
 2e0:	8d 2d       	mov	r24, r13
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0a d0       	rcall	.+20     	; 0x2fa <ledWriteAll>
        
//systemtakt

        blinktimer=blinktimer+SYSTEMTAKT;
 2e6:	0b 5f       	subi	r16, 0xFB	; 251
 2e8:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	8f e1       	ldi	r24, 0x1F	; 31
 2ec:	9e e4       	ldi	r25, 0x4E	; 78
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x1ca>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x1d0>
 2f4:	00 00       	nop

        swin=switchReadAll();
        temperaturead=swin&IMTEMP;
        inpow=swin&IMPOW;
        altin=tin;
        tin=buttonReadAllPL()&MTIN;
 2f6:	f9 2c       	mov	r15, r9
 2f8:	3a cf       	rjmp	.-396    	; 0x16e <main+0x4a>

000002fa <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 2fa:	82 b9       	out	0x02, r24	; 2
 2fc:	95 b9       	out	0x05, r25	; 5
 2fe:	08 95       	ret

00000300 <switchReadAll>:
 300:	86 b1       	in	r24, 0x06	; 6
 302:	08 95       	ret

00000304 <buttonReadAllPL>:
 304:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
 308:	08 95       	ret

0000030a <startSystemTimeMs>:
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	84 bd       	out	0x24, r24	; 36
 30e:	8b e0       	ldi	r24, 0x0B	; 11
 310:	85 bd       	out	0x25, r24	; 37
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 318:	89 ef       	ldi	r24, 0xF9	; 249
 31a:	87 bd       	out	0x27, r24	; 39
 31c:	08 95       	ret

0000031e <initAdc>:
 31e:	11 ba       	out	0x11, r1	; 17
 320:	10 ba       	out	0x10, r1	; 16
 322:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 326:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 32a:	80 e4       	ldi	r24, 0x40	; 64
 32c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 330:	8f e0       	ldi	r24, 0x0F	; 15
 332:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7c007d>
 33c:	ea e7       	ldi	r30, 0x7A	; 122
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	87 ea       	ldi	r24, 0xA7	; 167
 342:	80 83       	st	Z, r24
 344:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 348:	80 81       	ld	r24, Z
 34a:	80 64       	ori	r24, 0x40	; 64
 34c:	80 83       	st	Z, r24
 34e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 352:	84 ff       	sbrs	r24, 4
 354:	fc cf       	rjmp	.-8      	; 0x34e <initAdc+0x30>
 356:	ea e7       	ldi	r30, 0x7A	; 122
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	8f 7e       	andi	r24, 0xEF	; 239
 35e:	80 83       	st	Z, r24
 360:	08 95       	ret

00000362 <rgbWrite>:
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	33 e0       	ldi	r19, 0x03	; 3
 366:	f9 01       	movw	r30, r18
 368:	e8 1b       	sub	r30, r24
 36a:	f9 0b       	sbc	r31, r25
 36c:	c9 01       	movw	r24, r18
 36e:	86 1b       	sub	r24, r22
 370:	97 0b       	sbc	r25, r23
 372:	24 1b       	sub	r18, r20
 374:	35 0b       	sbc	r19, r21
 376:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 37a:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 37e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
 382:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
 386:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
 38a:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
 38e:	08 95       	ret

00000390 <initRgb>:
 390:	8e ef       	ldi	r24, 0xFE	; 254
 392:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 396:	8b e1       	ldi	r24, 0x1B	; 27
 398:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7c00a7>
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7c00a6>
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	d6 cf       	rjmp	.-84     	; 0x362 <rgbWrite>
 3b6:	08 95       	ret

000003b8 <lcdSid>:
 3b8:	88 23       	and	r24, r24
 3ba:	21 f0       	breq	.+8      	; 0x3c4 <lcdSid+0xc>
 3bc:	84 b3       	in	r24, 0x14	; 20
 3be:	81 60       	ori	r24, 0x01	; 1
 3c0:	84 bb       	out	0x14, r24	; 20
 3c2:	08 95       	ret
 3c4:	84 b3       	in	r24, 0x14	; 20
 3c6:	8e 7f       	andi	r24, 0xFE	; 254
 3c8:	84 bb       	out	0x14, r24	; 20
 3ca:	08 95       	ret

000003cc <lcdSclk>:
 3cc:	88 23       	and	r24, r24
 3ce:	21 f0       	breq	.+8      	; 0x3d8 <lcdSclk+0xc>
 3d0:	84 b3       	in	r24, 0x14	; 20
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	84 bb       	out	0x14, r24	; 20
 3d6:	08 95       	ret
 3d8:	84 b3       	in	r24, 0x14	; 20
 3da:	8d 7f       	andi	r24, 0xFD	; 253
 3dc:	84 bb       	out	0x14, r24	; 20
 3de:	08 95       	ret

000003e0 <lcdLight>:
 3e0:	81 11       	cpse	r24, r1
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <lcdLight+0xc>
 3e4:	84 b5       	in	r24, 0x24	; 36
 3e6:	8f 7d       	andi	r24, 0xDF	; 223
 3e8:	84 bd       	out	0x24, r24	; 36
 3ea:	08 95       	ret
 3ec:	94 b5       	in	r25, 0x24	; 36
 3ee:	90 62       	ori	r25, 0x20	; 32
 3f0:	94 bd       	out	0x24, r25	; 36
 3f2:	88 bd       	out	0x28, r24	; 40
 3f4:	08 95       	ret

000003f6 <writeLcdF>:
 3f6:	ef 92       	push	r14
 3f8:	ff 92       	push	r15
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	7c 01       	movw	r14, r24
 404:	eb 01       	movw	r28, r22
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	d7 df       	rcall	.-82     	; 0x3b8 <lcdSid>
 40a:	00 e0       	ldi	r16, 0x00	; 0
 40c:	10 e0       	ldi	r17, 0x00	; 0
 40e:	06 c0       	rjmp	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	dc df       	rcall	.-72     	; 0x3cc <lcdSclk>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	da df       	rcall	.-76     	; 0x3cc <lcdSclk>
 418:	0f 5f       	subi	r16, 0xFF	; 255
 41a:	1f 4f       	sbci	r17, 0xFF	; 255
 41c:	05 30       	cpi	r16, 0x05	; 5
 41e:	11 05       	cpc	r17, r1
 420:	b8 f3       	brcs	.-18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	c9 df       	rcall	.-110    	; 0x3b8 <lcdSid>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	d1 df       	rcall	.-94     	; 0x3cc <lcdSclk>
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	cf df       	rcall	.-98     	; 0x3cc <lcdSclk>
 42e:	83 e4       	ldi	r24, 0x43	; 67
 430:	e8 16       	cp	r14, r24
 432:	f1 04       	cpc	r15, r1
 434:	19 f4       	brne	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	bf df       	rcall	.-130    	; 0x3b8 <lcdSid>
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	bc df       	rcall	.-136    	; 0x3b8 <lcdSid>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	c4 df       	rcall	.-120    	; 0x3cc <lcdSclk>
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	c2 df       	rcall	.-124    	; 0x3cc <lcdSclk>
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	b6 df       	rcall	.-148    	; 0x3b8 <lcdSid>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	be df       	rcall	.-132    	; 0x3cc <lcdSclk>
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	bc df       	rcall	.-136    	; 0x3cc <lcdSclk>
 454:	00 e0       	ldi	r16, 0x00	; 0
 456:	10 e0       	ldi	r17, 0x00	; 0
 458:	11 c0       	rjmp	.+34     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	b7 df       	rcall	.-146    	; 0x3cc <lcdSclk>
 45e:	c0 ff       	sbrs	r28, 0
 460:	03 c0       	rjmp	.+6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	a9 df       	rcall	.-174    	; 0x3b8 <lcdSid>
 466:	02 c0       	rjmp	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	a6 df       	rcall	.-180    	; 0x3b8 <lcdSid>
 46c:	d6 95       	lsr	r29
 46e:	c7 95       	ror	r28
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	ac df       	rcall	.-168    	; 0x3cc <lcdSclk>
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	aa df       	rcall	.-172    	; 0x3cc <lcdSclk>
 478:	0f 5f       	subi	r16, 0xFF	; 255
 47a:	1f 4f       	sbci	r17, 0xFF	; 255
 47c:	04 30       	cpi	r16, 0x04	; 4
 47e:	11 05       	cpc	r17, r1
 480:	60 f3       	brcs	.-40     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	99 df       	rcall	.-206    	; 0x3b8 <lcdSid>
 486:	00 e0       	ldi	r16, 0x00	; 0
 488:	10 e0       	ldi	r17, 0x00	; 0
 48a:	06 c0       	rjmp	.+12     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	9e df       	rcall	.-196    	; 0x3cc <lcdSclk>
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	9c df       	rcall	.-200    	; 0x3cc <lcdSclk>
 494:	0f 5f       	subi	r16, 0xFF	; 255
 496:	1f 4f       	sbci	r17, 0xFF	; 255
 498:	04 30       	cpi	r16, 0x04	; 4
 49a:	11 05       	cpc	r17, r1
 49c:	b8 f3       	brcs	.-18     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 49e:	00 e0       	ldi	r16, 0x00	; 0
 4a0:	10 e0       	ldi	r17, 0x00	; 0
 4a2:	11 c0       	rjmp	.+34     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	92 df       	rcall	.-220    	; 0x3cc <lcdSclk>
 4a8:	c0 ff       	sbrs	r28, 0
 4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	84 df       	rcall	.-248    	; 0x3b8 <lcdSid>
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	81 df       	rcall	.-254    	; 0x3b8 <lcdSid>
 4b6:	d6 95       	lsr	r29
 4b8:	c7 95       	ror	r28
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	87 df       	rcall	.-242    	; 0x3cc <lcdSclk>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	85 df       	rcall	.-246    	; 0x3cc <lcdSclk>
 4c2:	0f 5f       	subi	r16, 0xFF	; 255
 4c4:	1f 4f       	sbci	r17, 0xFF	; 255
 4c6:	04 30       	cpi	r16, 0x04	; 4
 4c8:	11 05       	cpc	r17, r1
 4ca:	60 f3       	brcs	.-40     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	74 df       	rcall	.-280    	; 0x3b8 <lcdSid>
 4d0:	c0 e0       	ldi	r28, 0x00	; 0
 4d2:	d0 e0       	ldi	r29, 0x00	; 0
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	79 df       	rcall	.-270    	; 0x3cc <lcdSclk>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	77 df       	rcall	.-274    	; 0x3cc <lcdSclk>
 4de:	21 96       	adiw	r28, 0x01	; 1
 4e0:	c4 30       	cpi	r28, 0x04	; 4
 4e2:	d1 05       	cpc	r29, r1
 4e4:	c0 f3       	brcs	.-16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	67 df       	rcall	.-306    	; 0x3b8 <lcdSid>
 4ea:	87 ec       	ldi	r24, 0xC7	; 199
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f4:	00 00       	nop
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	ff 90       	pop	r15
 500:	ef 90       	pop	r14
 502:	08 95       	ret

00000504 <lcdWriteText>:
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	65 97       	sbiw	r28, 0x15	; 21
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	9e 01       	movw	r18, r28
 51c:	20 5e       	subi	r18, 0xE0	; 224
 51e:	3f 4f       	sbci	r19, 0xFF	; 255
 520:	4e 8d       	ldd	r20, Y+30	; 0x1e
 522:	5f 8d       	ldd	r21, Y+31	; 0x1f
 524:	65 e1       	ldi	r22, 0x15	; 21
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	2a d2       	rcall	.+1108   	; 0x982 <vsnprintf>
 52e:	6d 8d       	ldd	r22, Y+29	; 0x1d
 530:	8c 8d       	ldd	r24, Y+28	; 0x1c
 532:	90 e2       	ldi	r25, 0x20	; 32
 534:	89 9f       	mul	r24, r25
 536:	60 0d       	add	r22, r0
 538:	11 24       	eor	r1, r1
 53a:	60 68       	ori	r22, 0x80	; 128
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	83 e4       	ldi	r24, 0x43	; 67
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	59 df       	rcall	.-334    	; 0x3f6 <writeLcdF>
 544:	10 e0       	ldi	r17, 0x00	; 0
 546:	05 c0       	rjmp	.+10     	; 0x552 <lcdWriteText+0x4e>
 548:	1f 5f       	subi	r17, 0xFF	; 255
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	84 e4       	ldi	r24, 0x44	; 68
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	52 df       	rcall	.-348    	; 0x3f6 <writeLcdF>
 552:	e1 e0       	ldi	r30, 0x01	; 1
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	ec 0f       	add	r30, r28
 558:	fd 1f       	adc	r31, r29
 55a:	e1 0f       	add	r30, r17
 55c:	f1 1d       	adc	r31, r1
 55e:	60 81       	ld	r22, Z
 560:	61 11       	cpse	r22, r1
 562:	f2 cf       	rjmp	.-28     	; 0x548 <lcdWriteText+0x44>
 564:	65 96       	adiw	r28, 0x15	; 21
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	08 95       	ret

00000578 <lcdClear>:
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	83 e4       	ldi	r24, 0x43	; 67
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	3a df       	rcall	.-396    	; 0x3f6 <writeLcdF>
 582:	8f e3       	ldi	r24, 0x3F	; 63
 584:	9f e1       	ldi	r25, 0x1F	; 31
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <lcdClear+0xe>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <lcdClear+0x14>
 58c:	00 00       	nop
 58e:	8b e4       	ldi	r24, 0x4B	; 75
 590:	92 e0       	ldi	r25, 0x02	; 2
 592:	9f 93       	push	r25
 594:	8f 93       	push	r24
 596:	1f 92       	push	r1
 598:	1f 92       	push	r1
 59a:	b4 df       	rcall	.-152    	; 0x504 <lcdWriteText>
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	08 95       	ret

000005a6 <initLcd>:
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	11 df       	rcall	.-478    	; 0x3cc <lcdSclk>
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	05 df       	rcall	.-502    	; 0x3b8 <lcdSid>
 5ae:	64 e3       	ldi	r22, 0x34	; 52
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	83 e4       	ldi	r24, 0x43	; 67
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	1f df       	rcall	.-450    	; 0x3f6 <writeLcdF>
 5b8:	69 e0       	ldi	r22, 0x09	; 9
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	83 e4       	ldi	r24, 0x43	; 67
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	1a df       	rcall	.-460    	; 0x3f6 <writeLcdF>
 5c2:	60 e3       	ldi	r22, 0x30	; 48
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	83 e4       	ldi	r24, 0x43	; 67
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	15 df       	rcall	.-470    	; 0x3f6 <writeLcdF>
 5cc:	6c e0       	ldi	r22, 0x0C	; 12
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	83 e4       	ldi	r24, 0x43	; 67
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	10 df       	rcall	.-480    	; 0x3f6 <writeLcdF>
 5d6:	d0 df       	rcall	.-96     	; 0x578 <lcdClear>
 5d8:	67 e0       	ldi	r22, 0x07	; 7
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	83 e4       	ldi	r24, 0x43	; 67
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0a df       	rcall	.-492    	; 0x3f6 <writeLcdF>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	fd ce       	rjmp	.-518    	; 0x3e0 <lcdLight>
 5e6:	08 95       	ret

000005e8 <initBoard>:
 5e8:	ff 92       	push	r15
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	c8 2f       	mov	r28, r24
 5f4:	85 b7       	in	r24, 0x35	; 53
 5f6:	85 bf       	out	0x35, r24	; 53
 5f8:	12 b8       	out	0x02, r1	; 2
 5fa:	8f ef       	ldi	r24, 0xFF	; 255
 5fc:	81 b9       	out	0x01, r24	; 1
 5fe:	15 b8       	out	0x05, r1	; 5
 600:	84 b9       	out	0x04, r24	; 4
 602:	88 b9       	out	0x08, r24	; 8
 604:	17 b8       	out	0x07, r1	; 7
 606:	8b b9       	out	0x0b, r24	; 11
 608:	1a b8       	out	0x0a, r1	; 10
 60a:	8e b9       	out	0x0e, r24	; 14
 60c:	1d b8       	out	0x0d, r1	; 13
 60e:	9e b1       	in	r25, 0x0e	; 14
 610:	9b 7f       	andi	r25, 0xFB	; 251
 612:	9e b9       	out	0x0e, r25	; 14
 614:	11 ba       	out	0x11, r1	; 17
 616:	10 ba       	out	0x10, r1	; 16
 618:	94 e0       	ldi	r25, 0x04	; 4
 61a:	94 bb       	out	0x14, r25	; 20
 61c:	93 b3       	in	r25, 0x13	; 19
 61e:	93 60       	ori	r25, 0x03	; 3
 620:	93 bb       	out	0x13, r25	; 19
 622:	93 b3       	in	r25, 0x13	; 19
 624:	90 62       	ori	r25, 0x20	; 32
 626:	93 bb       	out	0x13, r25	; 19
 628:	97 ec       	ldi	r25, 0xC7	; 199
 62a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 62e:	98 e3       	ldi	r25, 0x38	; 56
 630:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
 634:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
 638:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
 63c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 640:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 644:	8c e3       	ldi	r24, 0x3C	; 60
 646:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 64a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 64e:	78 94       	sei
 650:	5c de       	rcall	.-840    	; 0x30a <startSystemTimeMs>
 652:	a9 df       	rcall	.-174    	; 0x5a6 <initLcd>
 654:	64 de       	rcall	.-824    	; 0x31e <initAdc>
 656:	9c de       	rcall	.-712    	; 0x390 <initRgb>
 658:	cc 23       	and	r28, r28
 65a:	09 f4       	brne	.+2      	; 0x65e <initBoard+0x76>
 65c:	a3 c0       	rjmp	.+326    	; 0x7a4 <initBoard+0x1bc>
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	bf de       	rcall	.-642    	; 0x3e0 <lcdLight>
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	6f ef       	ldi	r22, 0xFF	; 255
 668:	73 e0       	ldi	r23, 0x03	; 3
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	79 de       	rcall	.-782    	; 0x362 <rgbWrite>
 670:	88 e3       	ldi	r24, 0x38	; 56
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	9f 93       	push	r25
 676:	8f 93       	push	r24
 678:	1f 92       	push	r1
 67a:	1f 92       	push	r1
 67c:	43 df       	rcall	.-378    	; 0x504 <lcdWriteText>
 67e:	8d e4       	ldi	r24, 0x4D	; 77
 680:	92 e0       	ldi	r25, 0x02	; 2
 682:	9f 93       	push	r25
 684:	8f 93       	push	r24
 686:	1f 92       	push	r1
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	8f 93       	push	r24
 68c:	3b df       	rcall	.-394    	; 0x504 <lcdWriteText>
 68e:	83 e2       	ldi	r24, 0x23	; 35
 690:	92 e0       	ldi	r25, 0x02	; 2
 692:	9f 93       	push	r25
 694:	8f 93       	push	r24
 696:	1f 92       	push	r1
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	8f 93       	push	r24
 69c:	33 df       	rcall	.-410    	; 0x504 <lcdWriteText>
 69e:	82 e6       	ldi	r24, 0x62	; 98
 6a0:	92 e0       	ldi	r25, 0x02	; 2
 6a2:	9f 93       	push	r25
 6a4:	8f 93       	push	r24
 6a6:	1f 92       	push	r1
 6a8:	83 e0       	ldi	r24, 0x03	; 3
 6aa:	8f 93       	push	r24
 6ac:	2b df       	rcall	.-426    	; 0x504 <lcdWriteText>
 6ae:	8d b7       	in	r24, 0x3d	; 61
 6b0:	9e b7       	in	r25, 0x3e	; 62
 6b2:	40 96       	adiw	r24, 0x10	; 16
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	9e bf       	out	0x3e, r25	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	8d bf       	out	0x3d, r24	; 61
 6be:	ff 24       	eor	r15, r15
 6c0:	f3 94       	inc	r15
 6c2:	c0 e0       	ldi	r28, 0x00	; 0
 6c4:	10 e0       	ldi	r17, 0x00	; 0
 6c6:	01 e0       	ldi	r16, 0x01	; 1
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
 6ca:	00 23       	and	r16, r16
 6cc:	51 f0       	breq	.+20     	; 0x6e2 <initBoard+0xfa>
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e8       	ldi	r25, 0x80	; 128
 6d2:	0d 2e       	mov	r0, r29
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <initBoard+0xf2>
 6d6:	96 95       	lsr	r25
 6d8:	87 95       	ror	r24
 6da:	0a 94       	dec	r0
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <initBoard+0xee>
 6de:	0d de       	rcall	.-998    	; 0x2fa <ledWriteAll>
 6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <initBoard+0x10c>
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0d 2e       	mov	r0, r29
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <initBoard+0x106>
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	0a 94       	dec	r0
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <initBoard+0x102>
 6f2:	03 de       	rcall	.-1018   	; 0x2fa <ledWriteAll>
 6f4:	df 5f       	subi	r29, 0xFF	; 255
 6f6:	d1 31       	cpi	r29, 0x11	; 17
 6f8:	28 f0       	brcs	.+10     	; 0x704 <initBoard+0x11c>
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	01 11       	cpse	r16, r1
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	08 2f       	mov	r16, r24
 702:	d0 e0       	ldi	r29, 0x00	; 0
 704:	ff 20       	and	r15, r15
 706:	11 f0       	breq	.+4      	; 0x70c <initBoard+0x124>
 708:	ce 5f       	subi	r28, 0xFE	; 254
 70a:	01 c0       	rjmp	.+2      	; 0x70e <initBoard+0x126>
 70c:	c2 50       	subi	r28, 0x02	; 2
 70e:	8c 2f       	mov	r24, r28
 710:	67 de       	rcall	.-818    	; 0x3e0 <lcdLight>
 712:	ce 3f       	cpi	r28, 0xFE	; 254
 714:	09 f4       	brne	.+2      	; 0x718 <initBoard+0x130>
 716:	f1 2c       	mov	r15, r1
 718:	c8 37       	cpi	r28, 0x78	; 120
 71a:	11 f4       	brne	.+4      	; 0x720 <initBoard+0x138>
 71c:	ff 24       	eor	r15, r15
 71e:	f3 94       	inc	r15
 720:	11 11       	cpse	r17, r1
 722:	17 c0       	rjmp	.+46     	; 0x752 <initBoard+0x16a>
 724:	ef dd       	rcall	.-1058   	; 0x304 <buttonReadAllPL>
 726:	83 7c       	andi	r24, 0xC3	; 195
 728:	a1 f0       	breq	.+40     	; 0x752 <initBoard+0x16a>
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	50 e0       	ldi	r21, 0x00	; 0
 72e:	66 e2       	ldi	r22, 0x26	; 38
 730:	72 e0       	ldi	r23, 0x02	; 2
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	93 e0       	ldi	r25, 0x03	; 3
 736:	15 de       	rcall	.-982    	; 0x362 <rgbWrite>
 738:	87 e7       	ldi	r24, 0x77	; 119
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	9f 93       	push	r25
 73e:	8f 93       	push	r24
 740:	1f 92       	push	r1
 742:	83 e0       	ldi	r24, 0x03	; 3
 744:	8f 93       	push	r24
 746:	de de       	rcall	.-580    	; 0x504 <lcdWriteText>
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	11 e0       	ldi	r17, 0x01	; 1
 752:	11 23       	and	r17, r17
 754:	19 f0       	breq	.+6      	; 0x75c <initBoard+0x174>
 756:	d6 dd       	rcall	.-1108   	; 0x304 <buttonReadAllPL>
 758:	83 7c       	andi	r24, 0xC3	; 195
 75a:	39 f0       	breq	.+14     	; 0x76a <initBoard+0x182>
 75c:	8f ef       	ldi	r24, 0xFF	; 255
 75e:	9c e7       	ldi	r25, 0x7C	; 124
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <initBoard+0x178>
 764:	00 c0       	rjmp	.+0      	; 0x766 <initBoard+0x17e>
 766:	00 00       	nop
 768:	b0 cf       	rjmp	.-160    	; 0x6ca <initBoard+0xe2>
 76a:	06 df       	rcall	.-500    	; 0x578 <lcdClear>
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	38 de       	rcall	.-912    	; 0x3e0 <lcdLight>
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	c2 dd       	rcall	.-1148   	; 0x2fa <ledWriteAll>
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	ef dd       	rcall	.-1058   	; 0x362 <rgbWrite>
 784:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <systemTimeMs>
 788:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <systemTimeMs+0x1>
 78c:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <systemTimeMs+0x2>
 790:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <systemTimeMs+0x3>
 794:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <systemTimeMs+0x4>
 798:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <systemTimeMs+0x5>
 79c:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <systemTimeMs+0x6>
 7a0:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <systemTimeMs+0x7>
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	0f 91       	pop	r16
 7ac:	ff 90       	pop	r15
 7ae:	08 95       	ret

000007b0 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
 7b8:	28 97       	sbiw	r28, 0x08	; 8
 7ba:	0f b6       	in	r0, 0x3f	; 63
 7bc:	f8 94       	cli
 7be:	de bf       	out	0x3e, r29	; 62
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 7c4:	88 e0       	ldi	r24, 0x08	; 8
 7c6:	eb e1       	ldi	r30, 0x1B	; 27
 7c8:	f2 e0       	ldi	r31, 0x02	; 2
 7ca:	de 01       	movw	r26, r28
 7cc:	11 96       	adiw	r26, 0x01	; 1
 7ce:	01 90       	ld	r0, Z+
 7d0:	0d 92       	st	X+, r0
 7d2:	8a 95       	dec	r24
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 7d6:	e5 e0       	ldi	r30, 0x05	; 5
 7d8:	f1 e0       	ldi	r31, 0x01	; 1
 7da:	80 81       	ld	r24, Z
 7dc:	8f 7b       	andi	r24, 0xBF	; 191
 7de:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 7e0:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <Zeilen_Nr.2743>
 7e4:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <Zeilen_Nr.2743+0x1>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	8c 0f       	add	r24, r28
 7ee:	9d 1f       	adc	r25, r29
 7f0:	e8 0f       	add	r30, r24
 7f2:	f9 1f       	adc	r31, r25
 7f4:	80 81       	ld	r24, Z
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__data_end+0x1>
 7fc:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__data_end>
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	26 c0       	rjmp	.+76     	; 0x850 <matrixWriteNextLine+0xa0>
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 804:	e7 e3       	ldi	r30, 0x37	; 55
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	e8 1b       	sub	r30, r24
 80a:	f1 09       	sbc	r31, r1
 80c:	ee 0f       	add	r30, r30
 80e:	ff 1f       	adc	r31, r31
 810:	e4 56       	subi	r30, 0x64	; 100
 812:	fd 4f       	sbci	r31, 0xFD	; 253
 814:	40 81       	ld	r20, Z
 816:	51 81       	ldd	r21, Z+1	; 0x01
 818:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <__data_end>
 81c:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <__data_end+0x1>
 820:	24 23       	and	r18, r20
 822:	35 23       	and	r19, r21
 824:	23 2b       	or	r18, r19
 826:	31 f0       	breq	.+12     	; 0x834 <matrixWriteNextLine+0x84>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 828:	e5 e0       	ldi	r30, 0x05	; 5
 82a:	f1 e0       	ldi	r31, 0x01	; 1
 82c:	90 81       	ld	r25, Z
 82e:	90 62       	ori	r25, 0x20	; 32
 830:	90 83       	st	Z, r25
 832:	05 c0       	rjmp	.+10     	; 0x83e <matrixWriteNextLine+0x8e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 834:	e5 e0       	ldi	r30, 0x05	; 5
 836:	f1 e0       	ldi	r31, 0x01	; 1
 838:	90 81       	ld	r25, Z
 83a:	9f 7d       	andi	r25, 0xDF	; 223
 83c:	90 83       	st	Z, r25
        }
        CLOCK_1;
 83e:	e5 e0       	ldi	r30, 0x05	; 5
 840:	f1 e0       	ldi	r31, 0x01	; 1
 842:	90 81       	ld	r25, Z
 844:	90 61       	ori	r25, 0x10	; 16
 846:	90 83       	st	Z, r25
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 848:	90 81       	ld	r25, Z
 84a:	9f 7e       	andi	r25, 0xEF	; 239
 84c:	90 83       	st	Z, r25
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 84e:	8f 5f       	subi	r24, 0xFF	; 255
 850:	88 33       	cpi	r24, 0x38	; 56
 852:	c0 f2       	brcs	.-80     	; 0x804 <matrixWriteNextLine+0x54>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 854:	e5 e0       	ldi	r30, 0x05	; 5
 856:	f1 e0       	ldi	r31, 0x01	; 1
 858:	80 81       	ld	r24, Z
 85a:	87 7f       	andi	r24, 0xF7	; 247
 85c:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 85e:	80 81       	ld	r24, Z
 860:	88 7f       	andi	r24, 0xF8	; 248
 862:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 864:	90 81       	ld	r25, Z
 866:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <Zeilen_Nr.2743>
 86a:	89 2b       	or	r24, r25
 86c:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 86e:	80 81       	ld	r24, Z
 870:	80 64       	ori	r24, 0x40	; 64
 872:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 874:	80 81       	ld	r24, Z
 876:	88 60       	ori	r24, 0x08	; 8
 878:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 87a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <Zeilen_Nr.2743>
 87e:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <Zeilen_Nr.2743+0x1>
 882:	87 30       	cpi	r24, 0x07	; 7
 884:	91 05       	cpc	r25, r1
 886:	30 f4       	brcc	.+12     	; 0x894 <matrixWriteNextLine+0xe4>
    {
        Zeilen_Nr++;
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <Zeilen_Nr.2743+0x1>
 88e:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <Zeilen_Nr.2743>
 892:	07 c0       	rjmp	.+14     	; 0x8a2 <matrixWriteNextLine+0xf2>
    }
    else
    {
        Zeilen_Nr = 0;
 894:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <Zeilen_Nr.2743+0x1>
 898:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <Zeilen_Nr.2743>
        writeTextFinished = 1;
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <writeTextFinished>
    }
    
 8a2:	28 96       	adiw	r28, 0x08	; 8
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	f8 94       	cli
 8a8:	de bf       	out	0x3e, r29	; 62
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	cd bf       	out	0x3d, r28	; 61
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 8b4:	1f 92       	push	r1
 8b6:	0f 92       	push	r0
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	0f 92       	push	r0
 8bc:	11 24       	eor	r1, r1
 8be:	0b b6       	in	r0, 0x3b	; 59
 8c0:	0f 92       	push	r0
 8c2:	2f 93       	push	r18
 8c4:	3f 93       	push	r19
 8c6:	4f 93       	push	r20
 8c8:	5f 93       	push	r21
 8ca:	6f 93       	push	r22
 8cc:	7f 93       	push	r23
 8ce:	8f 93       	push	r24
 8d0:	9f 93       	push	r25
 8d2:	af 93       	push	r26
 8d4:	bf 93       	push	r27
 8d6:	ef 93       	push	r30
 8d8:	ff 93       	push	r31
    systemTimeMs += 1;
 8da:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <systemTimeMs>
 8de:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <systemTimeMs+0x1>
 8e2:	40 91 95 02 	lds	r20, 0x0295	; 0x800295 <systemTimeMs+0x2>
 8e6:	50 91 96 02 	lds	r21, 0x0296	; 0x800296 <systemTimeMs+0x3>
 8ea:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <systemTimeMs+0x4>
 8ee:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <systemTimeMs+0x5>
 8f2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <systemTimeMs+0x6>
 8f6:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <systemTimeMs+0x7>
 8fa:	a1 e0       	ldi	r26, 0x01	; 1
 8fc:	36 d0       	rcall	.+108    	; 0x96a <__adddi3_s8>
 8fe:	20 93 93 02 	sts	0x0293, r18	; 0x800293 <systemTimeMs>
 902:	30 93 94 02 	sts	0x0294, r19	; 0x800294 <systemTimeMs+0x1>
 906:	40 93 95 02 	sts	0x0295, r20	; 0x800295 <systemTimeMs+0x2>
 90a:	50 93 96 02 	sts	0x0296, r21	; 0x800296 <systemTimeMs+0x3>
 90e:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <systemTimeMs+0x4>
 912:	70 93 98 02 	sts	0x0298, r23	; 0x800298 <systemTimeMs+0x5>
 916:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <systemTimeMs+0x6>
 91a:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 91e:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <matrixRunning>
 922:	81 11       	cpse	r24, r1
 924:	45 df       	rcall	.-374    	; 0x7b0 <matrixWriteNextLine>
}
 926:	ff 91       	pop	r31
 928:	ef 91       	pop	r30
 92a:	bf 91       	pop	r27
 92c:	af 91       	pop	r26
 92e:	9f 91       	pop	r25
 930:	8f 91       	pop	r24
 932:	7f 91       	pop	r23
 934:	6f 91       	pop	r22
 936:	5f 91       	pop	r21
 938:	4f 91       	pop	r20
 93a:	3f 91       	pop	r19
 93c:	2f 91       	pop	r18
 93e:	0f 90       	pop	r0
 940:	0b be       	out	0x3b, r0	; 59
 942:	0f 90       	pop	r0
 944:	0f be       	out	0x3f, r0	; 63
 946:	0f 90       	pop	r0
 948:	1f 90       	pop	r1
 94a:	18 95       	reti

0000094c <__umulhisi3>:
 94c:	a2 9f       	mul	r26, r18
 94e:	b0 01       	movw	r22, r0
 950:	b3 9f       	mul	r27, r19
 952:	c0 01       	movw	r24, r0
 954:	a3 9f       	mul	r26, r19
 956:	70 0d       	add	r23, r0
 958:	81 1d       	adc	r24, r1
 95a:	11 24       	eor	r1, r1
 95c:	91 1d       	adc	r25, r1
 95e:	b2 9f       	mul	r27, r18
 960:	70 0d       	add	r23, r0
 962:	81 1d       	adc	r24, r1
 964:	11 24       	eor	r1, r1
 966:	91 1d       	adc	r25, r1
 968:	08 95       	ret

0000096a <__adddi3_s8>:
 96a:	00 24       	eor	r0, r0
 96c:	a7 fd       	sbrc	r26, 7
 96e:	00 94       	com	r0
 970:	2a 0f       	add	r18, r26
 972:	30 1d       	adc	r19, r0
 974:	40 1d       	adc	r20, r0
 976:	50 1d       	adc	r21, r0
 978:	60 1d       	adc	r22, r0
 97a:	70 1d       	adc	r23, r0
 97c:	80 1d       	adc	r24, r0
 97e:	90 1d       	adc	r25, r0
 980:	08 95       	ret

00000982 <vsnprintf>:
 982:	0f 93       	push	r16
 984:	1f 93       	push	r17
 986:	cf 93       	push	r28
 988:	df 93       	push	r29
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	2e 97       	sbiw	r28, 0x0e	; 14
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	f8 94       	cli
 994:	de bf       	out	0x3e, r29	; 62
 996:	0f be       	out	0x3f, r0	; 63
 998:	cd bf       	out	0x3d, r28	; 61
 99a:	8c 01       	movw	r16, r24
 99c:	fa 01       	movw	r30, r20
 99e:	86 e0       	ldi	r24, 0x06	; 6
 9a0:	8c 83       	std	Y+4, r24	; 0x04
 9a2:	1a 83       	std	Y+2, r17	; 0x02
 9a4:	09 83       	std	Y+1, r16	; 0x01
 9a6:	77 ff       	sbrs	r23, 7
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <vsnprintf+0x2c>
 9aa:	60 e0       	ldi	r22, 0x00	; 0
 9ac:	70 e8       	ldi	r23, 0x80	; 128
 9ae:	cb 01       	movw	r24, r22
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	9e 83       	std	Y+6, r25	; 0x06
 9b4:	8d 83       	std	Y+5, r24	; 0x05
 9b6:	a9 01       	movw	r20, r18
 9b8:	bf 01       	movw	r22, r30
 9ba:	ce 01       	movw	r24, r28
 9bc:	01 96       	adiw	r24, 0x01	; 1
 9be:	19 d0       	rcall	.+50     	; 0x9f2 <vfprintf>
 9c0:	4d 81       	ldd	r20, Y+5	; 0x05
 9c2:	5e 81       	ldd	r21, Y+6	; 0x06
 9c4:	57 fd       	sbrc	r21, 7
 9c6:	0a c0       	rjmp	.+20     	; 0x9dc <vsnprintf+0x5a>
 9c8:	2f 81       	ldd	r18, Y+7	; 0x07
 9ca:	38 85       	ldd	r19, Y+8	; 0x08
 9cc:	42 17       	cp	r20, r18
 9ce:	53 07       	cpc	r21, r19
 9d0:	0c f4       	brge	.+2      	; 0x9d4 <vsnprintf+0x52>
 9d2:	9a 01       	movw	r18, r20
 9d4:	f8 01       	movw	r30, r16
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	10 82       	st	Z, r1
 9dc:	2e 96       	adiw	r28, 0x0e	; 14
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	0f 91       	pop	r16
 9f0:	08 95       	ret

000009f2 <vfprintf>:
 9f2:	2f 92       	push	r2
 9f4:	3f 92       	push	r3
 9f6:	4f 92       	push	r4
 9f8:	5f 92       	push	r5
 9fa:	6f 92       	push	r6
 9fc:	7f 92       	push	r7
 9fe:	8f 92       	push	r8
 a00:	9f 92       	push	r9
 a02:	af 92       	push	r10
 a04:	bf 92       	push	r11
 a06:	cf 92       	push	r12
 a08:	df 92       	push	r13
 a0a:	ef 92       	push	r14
 a0c:	ff 92       	push	r15
 a0e:	0f 93       	push	r16
 a10:	1f 93       	push	r17
 a12:	cf 93       	push	r28
 a14:	df 93       	push	r29
 a16:	cd b7       	in	r28, 0x3d	; 61
 a18:	de b7       	in	r29, 0x3e	; 62
 a1a:	2b 97       	sbiw	r28, 0x0b	; 11
 a1c:	0f b6       	in	r0, 0x3f	; 63
 a1e:	f8 94       	cli
 a20:	de bf       	out	0x3e, r29	; 62
 a22:	0f be       	out	0x3f, r0	; 63
 a24:	cd bf       	out	0x3d, r28	; 61
 a26:	6c 01       	movw	r12, r24
 a28:	7b 01       	movw	r14, r22
 a2a:	8a 01       	movw	r16, r20
 a2c:	fc 01       	movw	r30, r24
 a2e:	17 82       	std	Z+7, r1	; 0x07
 a30:	16 82       	std	Z+6, r1	; 0x06
 a32:	83 81       	ldd	r24, Z+3	; 0x03
 a34:	81 ff       	sbrs	r24, 1
 a36:	bf c1       	rjmp	.+894    	; 0xdb6 <vfprintf+0x3c4>
 a38:	ce 01       	movw	r24, r28
 a3a:	01 96       	adiw	r24, 0x01	; 1
 a3c:	3c 01       	movw	r6, r24
 a3e:	f6 01       	movw	r30, r12
 a40:	93 81       	ldd	r25, Z+3	; 0x03
 a42:	f7 01       	movw	r30, r14
 a44:	93 fd       	sbrc	r25, 3
 a46:	85 91       	lpm	r24, Z+
 a48:	93 ff       	sbrs	r25, 3
 a4a:	81 91       	ld	r24, Z+
 a4c:	7f 01       	movw	r14, r30
 a4e:	88 23       	and	r24, r24
 a50:	09 f4       	brne	.+2      	; 0xa54 <vfprintf+0x62>
 a52:	ad c1       	rjmp	.+858    	; 0xdae <vfprintf+0x3bc>
 a54:	85 32       	cpi	r24, 0x25	; 37
 a56:	39 f4       	brne	.+14     	; 0xa66 <vfprintf+0x74>
 a58:	93 fd       	sbrc	r25, 3
 a5a:	85 91       	lpm	r24, Z+
 a5c:	93 ff       	sbrs	r25, 3
 a5e:	81 91       	ld	r24, Z+
 a60:	7f 01       	movw	r14, r30
 a62:	85 32       	cpi	r24, 0x25	; 37
 a64:	21 f4       	brne	.+8      	; 0xa6e <vfprintf+0x7c>
 a66:	b6 01       	movw	r22, r12
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	d6 d1       	rcall	.+940    	; 0xe18 <fputc>
 a6c:	e8 cf       	rjmp	.-48     	; 0xa3e <vfprintf+0x4c>
 a6e:	91 2c       	mov	r9, r1
 a70:	21 2c       	mov	r2, r1
 a72:	31 2c       	mov	r3, r1
 a74:	ff e1       	ldi	r31, 0x1F	; 31
 a76:	f3 15       	cp	r31, r3
 a78:	d8 f0       	brcs	.+54     	; 0xab0 <vfprintf+0xbe>
 a7a:	8b 32       	cpi	r24, 0x2B	; 43
 a7c:	79 f0       	breq	.+30     	; 0xa9c <vfprintf+0xaa>
 a7e:	38 f4       	brcc	.+14     	; 0xa8e <vfprintf+0x9c>
 a80:	80 32       	cpi	r24, 0x20	; 32
 a82:	79 f0       	breq	.+30     	; 0xaa2 <vfprintf+0xb0>
 a84:	83 32       	cpi	r24, 0x23	; 35
 a86:	a1 f4       	brne	.+40     	; 0xab0 <vfprintf+0xbe>
 a88:	23 2d       	mov	r18, r3
 a8a:	20 61       	ori	r18, 0x10	; 16
 a8c:	1d c0       	rjmp	.+58     	; 0xac8 <vfprintf+0xd6>
 a8e:	8d 32       	cpi	r24, 0x2D	; 45
 a90:	61 f0       	breq	.+24     	; 0xaaa <vfprintf+0xb8>
 a92:	80 33       	cpi	r24, 0x30	; 48
 a94:	69 f4       	brne	.+26     	; 0xab0 <vfprintf+0xbe>
 a96:	23 2d       	mov	r18, r3
 a98:	21 60       	ori	r18, 0x01	; 1
 a9a:	16 c0       	rjmp	.+44     	; 0xac8 <vfprintf+0xd6>
 a9c:	83 2d       	mov	r24, r3
 a9e:	82 60       	ori	r24, 0x02	; 2
 aa0:	38 2e       	mov	r3, r24
 aa2:	e3 2d       	mov	r30, r3
 aa4:	e4 60       	ori	r30, 0x04	; 4
 aa6:	3e 2e       	mov	r3, r30
 aa8:	2a c0       	rjmp	.+84     	; 0xafe <vfprintf+0x10c>
 aaa:	f3 2d       	mov	r31, r3
 aac:	f8 60       	ori	r31, 0x08	; 8
 aae:	1d c0       	rjmp	.+58     	; 0xaea <vfprintf+0xf8>
 ab0:	37 fc       	sbrc	r3, 7
 ab2:	2d c0       	rjmp	.+90     	; 0xb0e <vfprintf+0x11c>
 ab4:	20 ed       	ldi	r18, 0xD0	; 208
 ab6:	28 0f       	add	r18, r24
 ab8:	2a 30       	cpi	r18, 0x0A	; 10
 aba:	40 f0       	brcs	.+16     	; 0xacc <vfprintf+0xda>
 abc:	8e 32       	cpi	r24, 0x2E	; 46
 abe:	b9 f4       	brne	.+46     	; 0xaee <vfprintf+0xfc>
 ac0:	36 fc       	sbrc	r3, 6
 ac2:	75 c1       	rjmp	.+746    	; 0xdae <vfprintf+0x3bc>
 ac4:	23 2d       	mov	r18, r3
 ac6:	20 64       	ori	r18, 0x40	; 64
 ac8:	32 2e       	mov	r3, r18
 aca:	19 c0       	rjmp	.+50     	; 0xafe <vfprintf+0x10c>
 acc:	36 fe       	sbrs	r3, 6
 ace:	06 c0       	rjmp	.+12     	; 0xadc <vfprintf+0xea>
 ad0:	8a e0       	ldi	r24, 0x0A	; 10
 ad2:	98 9e       	mul	r9, r24
 ad4:	20 0d       	add	r18, r0
 ad6:	11 24       	eor	r1, r1
 ad8:	92 2e       	mov	r9, r18
 ada:	11 c0       	rjmp	.+34     	; 0xafe <vfprintf+0x10c>
 adc:	ea e0       	ldi	r30, 0x0A	; 10
 ade:	2e 9e       	mul	r2, r30
 ae0:	20 0d       	add	r18, r0
 ae2:	11 24       	eor	r1, r1
 ae4:	22 2e       	mov	r2, r18
 ae6:	f3 2d       	mov	r31, r3
 ae8:	f0 62       	ori	r31, 0x20	; 32
 aea:	3f 2e       	mov	r3, r31
 aec:	08 c0       	rjmp	.+16     	; 0xafe <vfprintf+0x10c>
 aee:	8c 36       	cpi	r24, 0x6C	; 108
 af0:	21 f4       	brne	.+8      	; 0xafa <vfprintf+0x108>
 af2:	83 2d       	mov	r24, r3
 af4:	80 68       	ori	r24, 0x80	; 128
 af6:	38 2e       	mov	r3, r24
 af8:	02 c0       	rjmp	.+4      	; 0xafe <vfprintf+0x10c>
 afa:	88 36       	cpi	r24, 0x68	; 104
 afc:	41 f4       	brne	.+16     	; 0xb0e <vfprintf+0x11c>
 afe:	f7 01       	movw	r30, r14
 b00:	93 fd       	sbrc	r25, 3
 b02:	85 91       	lpm	r24, Z+
 b04:	93 ff       	sbrs	r25, 3
 b06:	81 91       	ld	r24, Z+
 b08:	7f 01       	movw	r14, r30
 b0a:	81 11       	cpse	r24, r1
 b0c:	b3 cf       	rjmp	.-154    	; 0xa74 <vfprintf+0x82>
 b0e:	98 2f       	mov	r25, r24
 b10:	9f 7d       	andi	r25, 0xDF	; 223
 b12:	95 54       	subi	r25, 0x45	; 69
 b14:	93 30       	cpi	r25, 0x03	; 3
 b16:	28 f4       	brcc	.+10     	; 0xb22 <vfprintf+0x130>
 b18:	0c 5f       	subi	r16, 0xFC	; 252
 b1a:	1f 4f       	sbci	r17, 0xFF	; 255
 b1c:	9f e3       	ldi	r25, 0x3F	; 63
 b1e:	99 83       	std	Y+1, r25	; 0x01
 b20:	0d c0       	rjmp	.+26     	; 0xb3c <vfprintf+0x14a>
 b22:	83 36       	cpi	r24, 0x63	; 99
 b24:	31 f0       	breq	.+12     	; 0xb32 <vfprintf+0x140>
 b26:	83 37       	cpi	r24, 0x73	; 115
 b28:	71 f0       	breq	.+28     	; 0xb46 <vfprintf+0x154>
 b2a:	83 35       	cpi	r24, 0x53	; 83
 b2c:	09 f0       	breq	.+2      	; 0xb30 <vfprintf+0x13e>
 b2e:	55 c0       	rjmp	.+170    	; 0xbda <vfprintf+0x1e8>
 b30:	20 c0       	rjmp	.+64     	; 0xb72 <vfprintf+0x180>
 b32:	f8 01       	movw	r30, r16
 b34:	80 81       	ld	r24, Z
 b36:	89 83       	std	Y+1, r24	; 0x01
 b38:	0e 5f       	subi	r16, 0xFE	; 254
 b3a:	1f 4f       	sbci	r17, 0xFF	; 255
 b3c:	88 24       	eor	r8, r8
 b3e:	83 94       	inc	r8
 b40:	91 2c       	mov	r9, r1
 b42:	53 01       	movw	r10, r6
 b44:	12 c0       	rjmp	.+36     	; 0xb6a <vfprintf+0x178>
 b46:	28 01       	movw	r4, r16
 b48:	f2 e0       	ldi	r31, 0x02	; 2
 b4a:	4f 0e       	add	r4, r31
 b4c:	51 1c       	adc	r5, r1
 b4e:	f8 01       	movw	r30, r16
 b50:	a0 80       	ld	r10, Z
 b52:	b1 80       	ldd	r11, Z+1	; 0x01
 b54:	36 fe       	sbrs	r3, 6
 b56:	03 c0       	rjmp	.+6      	; 0xb5e <vfprintf+0x16c>
 b58:	69 2d       	mov	r22, r9
 b5a:	70 e0       	ldi	r23, 0x00	; 0
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0x170>
 b5e:	6f ef       	ldi	r22, 0xFF	; 255
 b60:	7f ef       	ldi	r23, 0xFF	; 255
 b62:	c5 01       	movw	r24, r10
 b64:	4e d1       	rcall	.+668    	; 0xe02 <strnlen>
 b66:	4c 01       	movw	r8, r24
 b68:	82 01       	movw	r16, r4
 b6a:	f3 2d       	mov	r31, r3
 b6c:	ff 77       	andi	r31, 0x7F	; 127
 b6e:	3f 2e       	mov	r3, r31
 b70:	15 c0       	rjmp	.+42     	; 0xb9c <vfprintf+0x1aa>
 b72:	28 01       	movw	r4, r16
 b74:	22 e0       	ldi	r18, 0x02	; 2
 b76:	42 0e       	add	r4, r18
 b78:	51 1c       	adc	r5, r1
 b7a:	f8 01       	movw	r30, r16
 b7c:	a0 80       	ld	r10, Z
 b7e:	b1 80       	ldd	r11, Z+1	; 0x01
 b80:	36 fe       	sbrs	r3, 6
 b82:	03 c0       	rjmp	.+6      	; 0xb8a <vfprintf+0x198>
 b84:	69 2d       	mov	r22, r9
 b86:	70 e0       	ldi	r23, 0x00	; 0
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <vfprintf+0x19c>
 b8a:	6f ef       	ldi	r22, 0xFF	; 255
 b8c:	7f ef       	ldi	r23, 0xFF	; 255
 b8e:	c5 01       	movw	r24, r10
 b90:	2d d1       	rcall	.+602    	; 0xdec <strnlen_P>
 b92:	4c 01       	movw	r8, r24
 b94:	f3 2d       	mov	r31, r3
 b96:	f0 68       	ori	r31, 0x80	; 128
 b98:	3f 2e       	mov	r3, r31
 b9a:	82 01       	movw	r16, r4
 b9c:	33 fc       	sbrc	r3, 3
 b9e:	19 c0       	rjmp	.+50     	; 0xbd2 <vfprintf+0x1e0>
 ba0:	82 2d       	mov	r24, r2
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	88 16       	cp	r8, r24
 ba6:	99 06       	cpc	r9, r25
 ba8:	a0 f4       	brcc	.+40     	; 0xbd2 <vfprintf+0x1e0>
 baa:	b6 01       	movw	r22, r12
 bac:	80 e2       	ldi	r24, 0x20	; 32
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	33 d1       	rcall	.+614    	; 0xe18 <fputc>
 bb2:	2a 94       	dec	r2
 bb4:	f5 cf       	rjmp	.-22     	; 0xba0 <vfprintf+0x1ae>
 bb6:	f5 01       	movw	r30, r10
 bb8:	37 fc       	sbrc	r3, 7
 bba:	85 91       	lpm	r24, Z+
 bbc:	37 fe       	sbrs	r3, 7
 bbe:	81 91       	ld	r24, Z+
 bc0:	5f 01       	movw	r10, r30
 bc2:	b6 01       	movw	r22, r12
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	28 d1       	rcall	.+592    	; 0xe18 <fputc>
 bc8:	21 10       	cpse	r2, r1
 bca:	2a 94       	dec	r2
 bcc:	21 e0       	ldi	r18, 0x01	; 1
 bce:	82 1a       	sub	r8, r18
 bd0:	91 08       	sbc	r9, r1
 bd2:	81 14       	cp	r8, r1
 bd4:	91 04       	cpc	r9, r1
 bd6:	79 f7       	brne	.-34     	; 0xbb6 <vfprintf+0x1c4>
 bd8:	e1 c0       	rjmp	.+450    	; 0xd9c <vfprintf+0x3aa>
 bda:	84 36       	cpi	r24, 0x64	; 100
 bdc:	11 f0       	breq	.+4      	; 0xbe2 <vfprintf+0x1f0>
 bde:	89 36       	cpi	r24, 0x69	; 105
 be0:	39 f5       	brne	.+78     	; 0xc30 <vfprintf+0x23e>
 be2:	f8 01       	movw	r30, r16
 be4:	37 fe       	sbrs	r3, 7
 be6:	07 c0       	rjmp	.+14     	; 0xbf6 <vfprintf+0x204>
 be8:	60 81       	ld	r22, Z
 bea:	71 81       	ldd	r23, Z+1	; 0x01
 bec:	82 81       	ldd	r24, Z+2	; 0x02
 bee:	93 81       	ldd	r25, Z+3	; 0x03
 bf0:	0c 5f       	subi	r16, 0xFC	; 252
 bf2:	1f 4f       	sbci	r17, 0xFF	; 255
 bf4:	08 c0       	rjmp	.+16     	; 0xc06 <vfprintf+0x214>
 bf6:	60 81       	ld	r22, Z
 bf8:	71 81       	ldd	r23, Z+1	; 0x01
 bfa:	07 2e       	mov	r0, r23
 bfc:	00 0c       	add	r0, r0
 bfe:	88 0b       	sbc	r24, r24
 c00:	99 0b       	sbc	r25, r25
 c02:	0e 5f       	subi	r16, 0xFE	; 254
 c04:	1f 4f       	sbci	r17, 0xFF	; 255
 c06:	f3 2d       	mov	r31, r3
 c08:	ff 76       	andi	r31, 0x6F	; 111
 c0a:	3f 2e       	mov	r3, r31
 c0c:	97 ff       	sbrs	r25, 7
 c0e:	09 c0       	rjmp	.+18     	; 0xc22 <vfprintf+0x230>
 c10:	90 95       	com	r25
 c12:	80 95       	com	r24
 c14:	70 95       	com	r23
 c16:	61 95       	neg	r22
 c18:	7f 4f       	sbci	r23, 0xFF	; 255
 c1a:	8f 4f       	sbci	r24, 0xFF	; 255
 c1c:	9f 4f       	sbci	r25, 0xFF	; 255
 c1e:	f0 68       	ori	r31, 0x80	; 128
 c20:	3f 2e       	mov	r3, r31
 c22:	2a e0       	ldi	r18, 0x0A	; 10
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	a3 01       	movw	r20, r6
 c28:	33 d1       	rcall	.+614    	; 0xe90 <__ultoa_invert>
 c2a:	88 2e       	mov	r8, r24
 c2c:	86 18       	sub	r8, r6
 c2e:	44 c0       	rjmp	.+136    	; 0xcb8 <vfprintf+0x2c6>
 c30:	85 37       	cpi	r24, 0x75	; 117
 c32:	31 f4       	brne	.+12     	; 0xc40 <vfprintf+0x24e>
 c34:	23 2d       	mov	r18, r3
 c36:	2f 7e       	andi	r18, 0xEF	; 239
 c38:	b2 2e       	mov	r11, r18
 c3a:	2a e0       	ldi	r18, 0x0A	; 10
 c3c:	30 e0       	ldi	r19, 0x00	; 0
 c3e:	25 c0       	rjmp	.+74     	; 0xc8a <vfprintf+0x298>
 c40:	93 2d       	mov	r25, r3
 c42:	99 7f       	andi	r25, 0xF9	; 249
 c44:	b9 2e       	mov	r11, r25
 c46:	8f 36       	cpi	r24, 0x6F	; 111
 c48:	c1 f0       	breq	.+48     	; 0xc7a <vfprintf+0x288>
 c4a:	18 f4       	brcc	.+6      	; 0xc52 <vfprintf+0x260>
 c4c:	88 35       	cpi	r24, 0x58	; 88
 c4e:	79 f0       	breq	.+30     	; 0xc6e <vfprintf+0x27c>
 c50:	ae c0       	rjmp	.+348    	; 0xdae <vfprintf+0x3bc>
 c52:	80 37       	cpi	r24, 0x70	; 112
 c54:	19 f0       	breq	.+6      	; 0xc5c <vfprintf+0x26a>
 c56:	88 37       	cpi	r24, 0x78	; 120
 c58:	21 f0       	breq	.+8      	; 0xc62 <vfprintf+0x270>
 c5a:	a9 c0       	rjmp	.+338    	; 0xdae <vfprintf+0x3bc>
 c5c:	e9 2f       	mov	r30, r25
 c5e:	e0 61       	ori	r30, 0x10	; 16
 c60:	be 2e       	mov	r11, r30
 c62:	b4 fe       	sbrs	r11, 4
 c64:	0d c0       	rjmp	.+26     	; 0xc80 <vfprintf+0x28e>
 c66:	fb 2d       	mov	r31, r11
 c68:	f4 60       	ori	r31, 0x04	; 4
 c6a:	bf 2e       	mov	r11, r31
 c6c:	09 c0       	rjmp	.+18     	; 0xc80 <vfprintf+0x28e>
 c6e:	34 fe       	sbrs	r3, 4
 c70:	0a c0       	rjmp	.+20     	; 0xc86 <vfprintf+0x294>
 c72:	29 2f       	mov	r18, r25
 c74:	26 60       	ori	r18, 0x06	; 6
 c76:	b2 2e       	mov	r11, r18
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x294>
 c7a:	28 e0       	ldi	r18, 0x08	; 8
 c7c:	30 e0       	ldi	r19, 0x00	; 0
 c7e:	05 c0       	rjmp	.+10     	; 0xc8a <vfprintf+0x298>
 c80:	20 e1       	ldi	r18, 0x10	; 16
 c82:	30 e0       	ldi	r19, 0x00	; 0
 c84:	02 c0       	rjmp	.+4      	; 0xc8a <vfprintf+0x298>
 c86:	20 e1       	ldi	r18, 0x10	; 16
 c88:	32 e0       	ldi	r19, 0x02	; 2
 c8a:	f8 01       	movw	r30, r16
 c8c:	b7 fe       	sbrs	r11, 7
 c8e:	07 c0       	rjmp	.+14     	; 0xc9e <vfprintf+0x2ac>
 c90:	60 81       	ld	r22, Z
 c92:	71 81       	ldd	r23, Z+1	; 0x01
 c94:	82 81       	ldd	r24, Z+2	; 0x02
 c96:	93 81       	ldd	r25, Z+3	; 0x03
 c98:	0c 5f       	subi	r16, 0xFC	; 252
 c9a:	1f 4f       	sbci	r17, 0xFF	; 255
 c9c:	06 c0       	rjmp	.+12     	; 0xcaa <vfprintf+0x2b8>
 c9e:	60 81       	ld	r22, Z
 ca0:	71 81       	ldd	r23, Z+1	; 0x01
 ca2:	80 e0       	ldi	r24, 0x00	; 0
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	0e 5f       	subi	r16, 0xFE	; 254
 ca8:	1f 4f       	sbci	r17, 0xFF	; 255
 caa:	a3 01       	movw	r20, r6
 cac:	f1 d0       	rcall	.+482    	; 0xe90 <__ultoa_invert>
 cae:	88 2e       	mov	r8, r24
 cb0:	86 18       	sub	r8, r6
 cb2:	fb 2d       	mov	r31, r11
 cb4:	ff 77       	andi	r31, 0x7F	; 127
 cb6:	3f 2e       	mov	r3, r31
 cb8:	36 fe       	sbrs	r3, 6
 cba:	0d c0       	rjmp	.+26     	; 0xcd6 <vfprintf+0x2e4>
 cbc:	23 2d       	mov	r18, r3
 cbe:	2e 7f       	andi	r18, 0xFE	; 254
 cc0:	a2 2e       	mov	r10, r18
 cc2:	89 14       	cp	r8, r9
 cc4:	58 f4       	brcc	.+22     	; 0xcdc <vfprintf+0x2ea>
 cc6:	34 fe       	sbrs	r3, 4
 cc8:	0b c0       	rjmp	.+22     	; 0xce0 <vfprintf+0x2ee>
 cca:	32 fc       	sbrc	r3, 2
 ccc:	09 c0       	rjmp	.+18     	; 0xce0 <vfprintf+0x2ee>
 cce:	83 2d       	mov	r24, r3
 cd0:	8e 7e       	andi	r24, 0xEE	; 238
 cd2:	a8 2e       	mov	r10, r24
 cd4:	05 c0       	rjmp	.+10     	; 0xce0 <vfprintf+0x2ee>
 cd6:	b8 2c       	mov	r11, r8
 cd8:	a3 2c       	mov	r10, r3
 cda:	03 c0       	rjmp	.+6      	; 0xce2 <vfprintf+0x2f0>
 cdc:	b8 2c       	mov	r11, r8
 cde:	01 c0       	rjmp	.+2      	; 0xce2 <vfprintf+0x2f0>
 ce0:	b9 2c       	mov	r11, r9
 ce2:	a4 fe       	sbrs	r10, 4
 ce4:	0f c0       	rjmp	.+30     	; 0xd04 <vfprintf+0x312>
 ce6:	fe 01       	movw	r30, r28
 ce8:	e8 0d       	add	r30, r8
 cea:	f1 1d       	adc	r31, r1
 cec:	80 81       	ld	r24, Z
 cee:	80 33       	cpi	r24, 0x30	; 48
 cf0:	21 f4       	brne	.+8      	; 0xcfa <vfprintf+0x308>
 cf2:	9a 2d       	mov	r25, r10
 cf4:	99 7e       	andi	r25, 0xE9	; 233
 cf6:	a9 2e       	mov	r10, r25
 cf8:	09 c0       	rjmp	.+18     	; 0xd0c <vfprintf+0x31a>
 cfa:	a2 fe       	sbrs	r10, 2
 cfc:	06 c0       	rjmp	.+12     	; 0xd0a <vfprintf+0x318>
 cfe:	b3 94       	inc	r11
 d00:	b3 94       	inc	r11
 d02:	04 c0       	rjmp	.+8      	; 0xd0c <vfprintf+0x31a>
 d04:	8a 2d       	mov	r24, r10
 d06:	86 78       	andi	r24, 0x86	; 134
 d08:	09 f0       	breq	.+2      	; 0xd0c <vfprintf+0x31a>
 d0a:	b3 94       	inc	r11
 d0c:	a3 fc       	sbrc	r10, 3
 d0e:	10 c0       	rjmp	.+32     	; 0xd30 <vfprintf+0x33e>
 d10:	a0 fe       	sbrs	r10, 0
 d12:	06 c0       	rjmp	.+12     	; 0xd20 <vfprintf+0x32e>
 d14:	b2 14       	cp	r11, r2
 d16:	80 f4       	brcc	.+32     	; 0xd38 <vfprintf+0x346>
 d18:	28 0c       	add	r2, r8
 d1a:	92 2c       	mov	r9, r2
 d1c:	9b 18       	sub	r9, r11
 d1e:	0d c0       	rjmp	.+26     	; 0xd3a <vfprintf+0x348>
 d20:	b2 14       	cp	r11, r2
 d22:	58 f4       	brcc	.+22     	; 0xd3a <vfprintf+0x348>
 d24:	b6 01       	movw	r22, r12
 d26:	80 e2       	ldi	r24, 0x20	; 32
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	76 d0       	rcall	.+236    	; 0xe18 <fputc>
 d2c:	b3 94       	inc	r11
 d2e:	f8 cf       	rjmp	.-16     	; 0xd20 <vfprintf+0x32e>
 d30:	b2 14       	cp	r11, r2
 d32:	18 f4       	brcc	.+6      	; 0xd3a <vfprintf+0x348>
 d34:	2b 18       	sub	r2, r11
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x34a>
 d38:	98 2c       	mov	r9, r8
 d3a:	21 2c       	mov	r2, r1
 d3c:	a4 fe       	sbrs	r10, 4
 d3e:	0f c0       	rjmp	.+30     	; 0xd5e <vfprintf+0x36c>
 d40:	b6 01       	movw	r22, r12
 d42:	80 e3       	ldi	r24, 0x30	; 48
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	68 d0       	rcall	.+208    	; 0xe18 <fputc>
 d48:	a2 fe       	sbrs	r10, 2
 d4a:	16 c0       	rjmp	.+44     	; 0xd78 <vfprintf+0x386>
 d4c:	a1 fc       	sbrc	r10, 1
 d4e:	03 c0       	rjmp	.+6      	; 0xd56 <vfprintf+0x364>
 d50:	88 e7       	ldi	r24, 0x78	; 120
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	02 c0       	rjmp	.+4      	; 0xd5a <vfprintf+0x368>
 d56:	88 e5       	ldi	r24, 0x58	; 88
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	b6 01       	movw	r22, r12
 d5c:	0c c0       	rjmp	.+24     	; 0xd76 <vfprintf+0x384>
 d5e:	8a 2d       	mov	r24, r10
 d60:	86 78       	andi	r24, 0x86	; 134
 d62:	51 f0       	breq	.+20     	; 0xd78 <vfprintf+0x386>
 d64:	a1 fe       	sbrs	r10, 1
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x37a>
 d68:	8b e2       	ldi	r24, 0x2B	; 43
 d6a:	01 c0       	rjmp	.+2      	; 0xd6e <vfprintf+0x37c>
 d6c:	80 e2       	ldi	r24, 0x20	; 32
 d6e:	a7 fc       	sbrc	r10, 7
 d70:	8d e2       	ldi	r24, 0x2D	; 45
 d72:	b6 01       	movw	r22, r12
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	50 d0       	rcall	.+160    	; 0xe18 <fputc>
 d78:	89 14       	cp	r8, r9
 d7a:	30 f4       	brcc	.+12     	; 0xd88 <vfprintf+0x396>
 d7c:	b6 01       	movw	r22, r12
 d7e:	80 e3       	ldi	r24, 0x30	; 48
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	4a d0       	rcall	.+148    	; 0xe18 <fputc>
 d84:	9a 94       	dec	r9
 d86:	f8 cf       	rjmp	.-16     	; 0xd78 <vfprintf+0x386>
 d88:	8a 94       	dec	r8
 d8a:	f3 01       	movw	r30, r6
 d8c:	e8 0d       	add	r30, r8
 d8e:	f1 1d       	adc	r31, r1
 d90:	80 81       	ld	r24, Z
 d92:	b6 01       	movw	r22, r12
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	40 d0       	rcall	.+128    	; 0xe18 <fputc>
 d98:	81 10       	cpse	r8, r1
 d9a:	f6 cf       	rjmp	.-20     	; 0xd88 <vfprintf+0x396>
 d9c:	22 20       	and	r2, r2
 d9e:	09 f4       	brne	.+2      	; 0xda2 <vfprintf+0x3b0>
 da0:	4e ce       	rjmp	.-868    	; 0xa3e <vfprintf+0x4c>
 da2:	b6 01       	movw	r22, r12
 da4:	80 e2       	ldi	r24, 0x20	; 32
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	37 d0       	rcall	.+110    	; 0xe18 <fputc>
 daa:	2a 94       	dec	r2
 dac:	f7 cf       	rjmp	.-18     	; 0xd9c <vfprintf+0x3aa>
 dae:	f6 01       	movw	r30, r12
 db0:	86 81       	ldd	r24, Z+6	; 0x06
 db2:	97 81       	ldd	r25, Z+7	; 0x07
 db4:	02 c0       	rjmp	.+4      	; 0xdba <vfprintf+0x3c8>
 db6:	8f ef       	ldi	r24, 0xFF	; 255
 db8:	9f ef       	ldi	r25, 0xFF	; 255
 dba:	2b 96       	adiw	r28, 0x0b	; 11
 dbc:	0f b6       	in	r0, 0x3f	; 63
 dbe:	f8 94       	cli
 dc0:	de bf       	out	0x3e, r29	; 62
 dc2:	0f be       	out	0x3f, r0	; 63
 dc4:	cd bf       	out	0x3d, r28	; 61
 dc6:	df 91       	pop	r29
 dc8:	cf 91       	pop	r28
 dca:	1f 91       	pop	r17
 dcc:	0f 91       	pop	r16
 dce:	ff 90       	pop	r15
 dd0:	ef 90       	pop	r14
 dd2:	df 90       	pop	r13
 dd4:	cf 90       	pop	r12
 dd6:	bf 90       	pop	r11
 dd8:	af 90       	pop	r10
 dda:	9f 90       	pop	r9
 ddc:	8f 90       	pop	r8
 dde:	7f 90       	pop	r7
 de0:	6f 90       	pop	r6
 de2:	5f 90       	pop	r5
 de4:	4f 90       	pop	r4
 de6:	3f 90       	pop	r3
 de8:	2f 90       	pop	r2
 dea:	08 95       	ret

00000dec <strnlen_P>:
 dec:	fc 01       	movw	r30, r24
 dee:	05 90       	lpm	r0, Z+
 df0:	61 50       	subi	r22, 0x01	; 1
 df2:	70 40       	sbci	r23, 0x00	; 0
 df4:	01 10       	cpse	r0, r1
 df6:	d8 f7       	brcc	.-10     	; 0xdee <strnlen_P+0x2>
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	8e 0f       	add	r24, r30
 dfe:	9f 1f       	adc	r25, r31
 e00:	08 95       	ret

00000e02 <strnlen>:
 e02:	fc 01       	movw	r30, r24
 e04:	61 50       	subi	r22, 0x01	; 1
 e06:	70 40       	sbci	r23, 0x00	; 0
 e08:	01 90       	ld	r0, Z+
 e0a:	01 10       	cpse	r0, r1
 e0c:	d8 f7       	brcc	.-10     	; 0xe04 <strnlen+0x2>
 e0e:	80 95       	com	r24
 e10:	90 95       	com	r25
 e12:	8e 0f       	add	r24, r30
 e14:	9f 1f       	adc	r25, r31
 e16:	08 95       	ret

00000e18 <fputc>:
 e18:	0f 93       	push	r16
 e1a:	1f 93       	push	r17
 e1c:	cf 93       	push	r28
 e1e:	df 93       	push	r29
 e20:	fb 01       	movw	r30, r22
 e22:	23 81       	ldd	r18, Z+3	; 0x03
 e24:	21 fd       	sbrc	r18, 1
 e26:	03 c0       	rjmp	.+6      	; 0xe2e <fputc+0x16>
 e28:	8f ef       	ldi	r24, 0xFF	; 255
 e2a:	9f ef       	ldi	r25, 0xFF	; 255
 e2c:	2c c0       	rjmp	.+88     	; 0xe86 <fputc+0x6e>
 e2e:	22 ff       	sbrs	r18, 2
 e30:	16 c0       	rjmp	.+44     	; 0xe5e <fputc+0x46>
 e32:	46 81       	ldd	r20, Z+6	; 0x06
 e34:	57 81       	ldd	r21, Z+7	; 0x07
 e36:	24 81       	ldd	r18, Z+4	; 0x04
 e38:	35 81       	ldd	r19, Z+5	; 0x05
 e3a:	42 17       	cp	r20, r18
 e3c:	53 07       	cpc	r21, r19
 e3e:	44 f4       	brge	.+16     	; 0xe50 <fputc+0x38>
 e40:	a0 81       	ld	r26, Z
 e42:	b1 81       	ldd	r27, Z+1	; 0x01
 e44:	9d 01       	movw	r18, r26
 e46:	2f 5f       	subi	r18, 0xFF	; 255
 e48:	3f 4f       	sbci	r19, 0xFF	; 255
 e4a:	31 83       	std	Z+1, r19	; 0x01
 e4c:	20 83       	st	Z, r18
 e4e:	8c 93       	st	X, r24
 e50:	26 81       	ldd	r18, Z+6	; 0x06
 e52:	37 81       	ldd	r19, Z+7	; 0x07
 e54:	2f 5f       	subi	r18, 0xFF	; 255
 e56:	3f 4f       	sbci	r19, 0xFF	; 255
 e58:	37 83       	std	Z+7, r19	; 0x07
 e5a:	26 83       	std	Z+6, r18	; 0x06
 e5c:	14 c0       	rjmp	.+40     	; 0xe86 <fputc+0x6e>
 e5e:	8b 01       	movw	r16, r22
 e60:	ec 01       	movw	r28, r24
 e62:	fb 01       	movw	r30, r22
 e64:	00 84       	ldd	r0, Z+8	; 0x08
 e66:	f1 85       	ldd	r31, Z+9	; 0x09
 e68:	e0 2d       	mov	r30, r0
 e6a:	19 95       	eicall
 e6c:	89 2b       	or	r24, r25
 e6e:	e1 f6       	brne	.-72     	; 0xe28 <fputc+0x10>
 e70:	d8 01       	movw	r26, r16
 e72:	16 96       	adiw	r26, 0x06	; 6
 e74:	8d 91       	ld	r24, X+
 e76:	9c 91       	ld	r25, X
 e78:	17 97       	sbiw	r26, 0x07	; 7
 e7a:	01 96       	adiw	r24, 0x01	; 1
 e7c:	17 96       	adiw	r26, 0x07	; 7
 e7e:	9c 93       	st	X, r25
 e80:	8e 93       	st	-X, r24
 e82:	16 97       	sbiw	r26, 0x06	; 6
 e84:	ce 01       	movw	r24, r28
 e86:	df 91       	pop	r29
 e88:	cf 91       	pop	r28
 e8a:	1f 91       	pop	r17
 e8c:	0f 91       	pop	r16
 e8e:	08 95       	ret

00000e90 <__ultoa_invert>:
 e90:	fa 01       	movw	r30, r20
 e92:	aa 27       	eor	r26, r26
 e94:	28 30       	cpi	r18, 0x08	; 8
 e96:	51 f1       	breq	.+84     	; 0xeec <__ultoa_invert+0x5c>
 e98:	20 31       	cpi	r18, 0x10	; 16
 e9a:	81 f1       	breq	.+96     	; 0xefc <__ultoa_invert+0x6c>
 e9c:	e8 94       	clt
 e9e:	6f 93       	push	r22
 ea0:	6e 7f       	andi	r22, 0xFE	; 254
 ea2:	6e 5f       	subi	r22, 0xFE	; 254
 ea4:	7f 4f       	sbci	r23, 0xFF	; 255
 ea6:	8f 4f       	sbci	r24, 0xFF	; 255
 ea8:	9f 4f       	sbci	r25, 0xFF	; 255
 eaa:	af 4f       	sbci	r26, 0xFF	; 255
 eac:	b1 e0       	ldi	r27, 0x01	; 1
 eae:	3e d0       	rcall	.+124    	; 0xf2c <__ultoa_invert+0x9c>
 eb0:	b4 e0       	ldi	r27, 0x04	; 4
 eb2:	3c d0       	rcall	.+120    	; 0xf2c <__ultoa_invert+0x9c>
 eb4:	67 0f       	add	r22, r23
 eb6:	78 1f       	adc	r23, r24
 eb8:	89 1f       	adc	r24, r25
 eba:	9a 1f       	adc	r25, r26
 ebc:	a1 1d       	adc	r26, r1
 ebe:	68 0f       	add	r22, r24
 ec0:	79 1f       	adc	r23, r25
 ec2:	8a 1f       	adc	r24, r26
 ec4:	91 1d       	adc	r25, r1
 ec6:	a1 1d       	adc	r26, r1
 ec8:	6a 0f       	add	r22, r26
 eca:	71 1d       	adc	r23, r1
 ecc:	81 1d       	adc	r24, r1
 ece:	91 1d       	adc	r25, r1
 ed0:	a1 1d       	adc	r26, r1
 ed2:	20 d0       	rcall	.+64     	; 0xf14 <__ultoa_invert+0x84>
 ed4:	09 f4       	brne	.+2      	; 0xed8 <__ultoa_invert+0x48>
 ed6:	68 94       	set
 ed8:	3f 91       	pop	r19
 eda:	2a e0       	ldi	r18, 0x0A	; 10
 edc:	26 9f       	mul	r18, r22
 ede:	11 24       	eor	r1, r1
 ee0:	30 19       	sub	r19, r0
 ee2:	30 5d       	subi	r19, 0xD0	; 208
 ee4:	31 93       	st	Z+, r19
 ee6:	de f6       	brtc	.-74     	; 0xe9e <__ultoa_invert+0xe>
 ee8:	cf 01       	movw	r24, r30
 eea:	08 95       	ret
 eec:	46 2f       	mov	r20, r22
 eee:	47 70       	andi	r20, 0x07	; 7
 ef0:	40 5d       	subi	r20, 0xD0	; 208
 ef2:	41 93       	st	Z+, r20
 ef4:	b3 e0       	ldi	r27, 0x03	; 3
 ef6:	0f d0       	rcall	.+30     	; 0xf16 <__ultoa_invert+0x86>
 ef8:	c9 f7       	brne	.-14     	; 0xeec <__ultoa_invert+0x5c>
 efa:	f6 cf       	rjmp	.-20     	; 0xee8 <__ultoa_invert+0x58>
 efc:	46 2f       	mov	r20, r22
 efe:	4f 70       	andi	r20, 0x0F	; 15
 f00:	40 5d       	subi	r20, 0xD0	; 208
 f02:	4a 33       	cpi	r20, 0x3A	; 58
 f04:	18 f0       	brcs	.+6      	; 0xf0c <__ultoa_invert+0x7c>
 f06:	49 5d       	subi	r20, 0xD9	; 217
 f08:	31 fd       	sbrc	r19, 1
 f0a:	40 52       	subi	r20, 0x20	; 32
 f0c:	41 93       	st	Z+, r20
 f0e:	02 d0       	rcall	.+4      	; 0xf14 <__ultoa_invert+0x84>
 f10:	a9 f7       	brne	.-22     	; 0xefc <__ultoa_invert+0x6c>
 f12:	ea cf       	rjmp	.-44     	; 0xee8 <__ultoa_invert+0x58>
 f14:	b4 e0       	ldi	r27, 0x04	; 4
 f16:	a6 95       	lsr	r26
 f18:	97 95       	ror	r25
 f1a:	87 95       	ror	r24
 f1c:	77 95       	ror	r23
 f1e:	67 95       	ror	r22
 f20:	ba 95       	dec	r27
 f22:	c9 f7       	brne	.-14     	; 0xf16 <__ultoa_invert+0x86>
 f24:	00 97       	sbiw	r24, 0x00	; 0
 f26:	61 05       	cpc	r22, r1
 f28:	71 05       	cpc	r23, r1
 f2a:	08 95       	ret
 f2c:	9b 01       	movw	r18, r22
 f2e:	ac 01       	movw	r20, r24
 f30:	0a 2e       	mov	r0, r26
 f32:	06 94       	lsr	r0
 f34:	57 95       	ror	r21
 f36:	47 95       	ror	r20
 f38:	37 95       	ror	r19
 f3a:	27 95       	ror	r18
 f3c:	ba 95       	dec	r27
 f3e:	c9 f7       	brne	.-14     	; 0xf32 <__ultoa_invert+0xa2>
 f40:	62 0f       	add	r22, r18
 f42:	73 1f       	adc	r23, r19
 f44:	84 1f       	adc	r24, r20
 f46:	95 1f       	adc	r25, r21
 f48:	a0 1d       	adc	r26, r0
 f4a:	08 95       	ret

00000f4c <_exit>:
 f4c:	f8 94       	cli

00000f4e <__stop_program>:
 f4e:	ff cf       	rjmp	.-2      	; 0xf4e <__stop_program>
