
7-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  0000022e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010f0  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd4  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000638  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000028c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000681  00000000  00000000  00002998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000224  00000000  00000000  00003019  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000323d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e2       	ldi	r30, 0x2E	; 46
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 33       	cpi	r26, 0x30	; 48
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	08 d0       	rcall	.+16     	; 0x120 <main>
 110:	8c c0       	rjmp	.+280    	; 0x22a <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <initBoard>:

#include "ADtreiber.h"

void initBoard(void)
{
    DDRA = 0xff;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xff;
 118:	84 b9       	out	0x04, r24	; 4
    DDRC = 0;
 11a:	17 b8       	out	0x07, r1	; 7
    PORTC = 0xff;
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	08 95       	ret

00000120 <main>:
    #define     sim3        8
    #define     sin1m       0xf
    

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	e0 97       	sbiw	r28, 0x30	; 48
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    const uint16_t HEX_TO_7SEG[18]=
 134:	84 e2       	ldi	r24, 0x24	; 36
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f2 e0       	ldi	r31, 0x02	; 2
 13a:	de 01       	movw	r26, r28
 13c:	11 96       	adiw	r26, 0x01	; 1
 13e:	01 90       	ld	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	8a 95       	dec	r24
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x1e>
            0b1001,
            0b1011,
            0b1010,
            0
        };
    char nummer[]={"a0774742340"};
 146:	8c e0       	ldi	r24, 0x0C	; 12
 148:	e4 e2       	ldi	r30, 0x24	; 36
 14a:	f2 e0       	ldi	r31, 0x02	; 2
 14c:	de 01       	movw	r26, r28
 14e:	95 96       	adiw	r26, 0x25	; 37
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	8a 95       	dec	r24
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x30>
    uint16_t diff=0;
    uint8_t swin=0;
    uint8_t i=0;
    
    
    initBoard();
 158:	dd df       	rcall	.-70     	; 0x114 <initBoard>
    uint8_t err=0;
    uint16_t zahl=0;
    uint8_t ziffer=0;
    uint16_t diff=0;
    uint8_t swin=0;
    uint8_t i=0;
 15a:	b1 2c       	mov	r11, r1
    
    uint8_t zalt=0;
    uint8_t systemtakt=10;
    uint32_t systemzeit=0;
    uint8_t err=0;
    uint16_t zahl=0;
 15c:	00 e0       	ldi	r16, 0x00	; 0
 15e:	10 e0       	ldi	r17, 0x00	; 0
        };
    char nummer[]={"a0774742340"};
    
    uint8_t zalt=0;
    uint8_t systemtakt=10;
    uint32_t systemzeit=0;
 160:	c1 2c       	mov	r12, r1
 162:	d1 2c       	mov	r13, r1
 164:	76 01       	movw	r14, r12
    {
//eingabe

    
//verarbeitung
    if (!(systemzeit%600))
 166:	c7 01       	movw	r24, r14
 168:	b6 01       	movw	r22, r12
 16a:	28 e5       	ldi	r18, 0x58	; 88
 16c:	32 e0       	ldi	r19, 0x02	; 2
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	39 d0       	rcall	.+114    	; 0x1e6 <__udivmodsi4>
 174:	61 15       	cp	r22, r1
 176:	71 05       	cpc	r23, r1
 178:	81 05       	cpc	r24, r1
 17a:	91 05       	cpc	r25, r1
 17c:	b9 f4       	brne	.+46     	; 0x1ac <main+0x8c>
    {
        if (nummer[i])
 17e:	e5 e2       	ldi	r30, 0x25	; 37
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	eb 0d       	add	r30, r11
 188:	f1 1d       	adc	r31, r1
 18a:	20 81       	ld	r18, Z
 18c:	22 23       	and	r18, r18
 18e:	49 f0       	breq	.+18     	; 0x1a2 <main+0x82>
        {
            if ((nummer[i]>='0')&&(nummer[i]<='9'))
 190:	30 ed       	ldi	r19, 0xD0	; 208
 192:	32 0f       	add	r19, r18
 194:	3a 30       	cpi	r19, 0x0A	; 10
 196:	38 f4       	brcc	.+14     	; 0x1a6 <main+0x86>
            {
                zahl=nummer[i]-48;
 198:	02 2f       	mov	r16, r18
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	00 53       	subi	r16, 0x30	; 48
 19e:	11 09       	sbc	r17, r1
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <main+0x8a>
                zahl=16;
            }
        }
        else
        {
            i=0;
 1a2:	b1 2c       	mov	r11, r1
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <main+0x8a>
            {
                zahl=nummer[i]-48;
            }
            else
            {
                zahl=16;
 1a6:	00 e1       	ldi	r16, 0x10	; 16
 1a8:	10 e0       	ldi	r17, 0x00	; 0
        }
        else
        {
            i=0;
        }        
    i=i+1;
 1aa:	b3 94       	inc	r11
    }            

//ausgabe
    if ((systemzeit%600)<500)
 1ac:	64 3f       	cpi	r22, 0xF4	; 244
 1ae:	71 40       	sbci	r23, 0x01	; 1
 1b0:	81 05       	cpc	r24, r1
 1b2:	91 05       	cpc	r25, r1
 1b4:	60 f4       	brcc	.+24     	; 0x1ce <main+0xae>
    {
        PORTB=HEX_TO_7SEG[zahl];
 1b6:	f8 01       	movw	r30, r16
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	8c 0f       	add	r24, r28
 1c2:	9d 1f       	adc	r25, r29
 1c4:	e8 0f       	add	r30, r24
 1c6:	f9 1f       	adc	r31, r25
 1c8:	80 81       	ld	r24, Z
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <main+0xb2>
    }
    else
    {
        PORTB=HEX_TO_7SEG[17];
 1ce:	8b a1       	ldd	r24, Y+35	; 0x23
 1d0:	85 b9       	out	0x05, r24	; 5
    }
   
//systemtakt
    systemzeit=systemzeit+systemtakt;
 1d2:	9a e0       	ldi	r25, 0x0A	; 10
 1d4:	c9 0e       	add	r12, r25
 1d6:	d1 1c       	adc	r13, r1
 1d8:	e1 1c       	adc	r14, r1
 1da:	f1 1c       	adc	r15, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1dc:	80 e4       	ldi	r24, 0x40	; 64
 1de:	9c e9       	ldi	r25, 0x9C	; 156
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0xc0>
 1e4:	c0 cf       	rjmp	.-128    	; 0x166 <main+0x46>

000001e6 <__udivmodsi4>:
 1e6:	a1 e2       	ldi	r26, 0x21	; 33
 1e8:	1a 2e       	mov	r1, r26
 1ea:	aa 1b       	sub	r26, r26
 1ec:	bb 1b       	sub	r27, r27
 1ee:	fd 01       	movw	r30, r26
 1f0:	0d c0       	rjmp	.+26     	; 0x20c <__udivmodsi4_ep>

000001f2 <__udivmodsi4_loop>:
 1f2:	aa 1f       	adc	r26, r26
 1f4:	bb 1f       	adc	r27, r27
 1f6:	ee 1f       	adc	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	a2 17       	cp	r26, r18
 1fc:	b3 07       	cpc	r27, r19
 1fe:	e4 07       	cpc	r30, r20
 200:	f5 07       	cpc	r31, r21
 202:	20 f0       	brcs	.+8      	; 0x20c <__udivmodsi4_ep>
 204:	a2 1b       	sub	r26, r18
 206:	b3 0b       	sbc	r27, r19
 208:	e4 0b       	sbc	r30, r20
 20a:	f5 0b       	sbc	r31, r21

0000020c <__udivmodsi4_ep>:
 20c:	66 1f       	adc	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	88 1f       	adc	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	1a 94       	dec	r1
 216:	69 f7       	brne	.-38     	; 0x1f2 <__udivmodsi4_loop>
 218:	60 95       	com	r22
 21a:	70 95       	com	r23
 21c:	80 95       	com	r24
 21e:	90 95       	com	r25
 220:	9b 01       	movw	r18, r22
 222:	ac 01       	movw	r20, r24
 224:	bd 01       	movw	r22, r26
 226:	cf 01       	movw	r24, r30
 228:	08 95       	ret

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
