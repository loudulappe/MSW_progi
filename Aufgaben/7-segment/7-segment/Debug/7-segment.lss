
7-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  000001e6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010ea  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db6  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000664  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000678  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000029b  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000326f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ee       	ldi	r30, 0xE6	; 230
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0d d0       	rcall	.+26     	; 0x12a <main>
 110:	68 c0       	rjmp	.+208    	; 0x1e2 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <initBoard>:
    messwert |= ADCH <<8;
    
    ADCSRA &= 0xEF;                // Interruptflage löschen
    
    return messwert;
}
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	81 b9       	out	0x01, r24	; 1
 118:	84 b9       	out	0x04, r24	; 4
 11a:	17 b8       	out	0x07, r1	; 7
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	08 95       	ret

00000120 <ledWriteAll>:
 120:	82 b9       	out	0x02, r24	; 2
 122:	95 b9       	out	0x05, r25	; 5
 124:	08 95       	ret

00000126 <SwitchReadAll>:

uint8_t SwitchReadAll()
{
    return PINC;
 126:	86 b1       	in	r24, 0x06	; 6
}
 128:	08 95       	ret

0000012a <main>:
    #define     sim3        8
    #define     sin1m       0xf
    

int main(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	e5 97       	sbiw	r28, 0x35	; 53
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
    const uint16_t HEX_TO_7SEG[18]=
 13e:	84 e2       	ldi	r24, 0x24	; 36
 140:	e0 e0       	ldi	r30, 0x00	; 0
 142:	f2 e0       	ldi	r31, 0x02	; 2
 144:	de 01       	movw	r26, r28
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	8a 95       	dec	r24
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x1e>
            0b00111011,
            0b00110011,
            0b10000000,
            0b00000000
        };
    const uint8_t GRAY_TO_HEX[17]=
 150:	81 e1       	ldi	r24, 0x11	; 17
 152:	e4 e2       	ldi	r30, 0x24	; 36
 154:	f2 e0       	ldi	r31, 0x02	; 2
 156:	de 01       	movw	r26, r28
 158:	95 96       	adiw	r26, 0x25	; 37
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	8a 95       	dec	r24
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x30>
    uint8_t sin1=0;
    uint8_t diff=0;
    uint8_t swin=0;
    
    
    initBoard();
 162:	d8 df       	rcall	.-80     	; 0x114 <initBoard>
    
    uint8_t zalt=0;
    uint8_t systemtakt=10;
    uint32_t systemzeit=0;
    uint8_t err=0;
    uint16_t zahl=0;
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	10 e0       	ldi	r17, 0x00	; 0
        };
    
    uint8_t zalt=0;
    uint8_t systemtakt=10;
    uint32_t systemzeit=0;
    uint8_t err=0;
 168:	f1 2c       	mov	r15, r1
    initBoard();

    while (1) 
    {
//eingabe
        swin=SwitchReadAll();
 16a:	e1 2c       	mov	r14, r1
 16c:	dc df       	rcall	.-72     	; 0x126 <SwitchReadAll>
        
        sin1= swin&sin1m;
 16e:	8f 70       	andi	r24, 0x0F	; 15
        if (!err)
 170:	f1 10       	cpse	r15, r1
 172:	01 c0       	rjmp	.+2      	; 0x176 <main+0x4c>
        {
            zalt=zahl;
 174:	e0 2e       	mov	r14, r16
        }
    
// verarbeitung
    zahl= GRAY_TO_HEX[sin1];
 176:	e5 e2       	ldi	r30, 0x25	; 37
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ec 0f       	add	r30, r28
 17c:	fd 1f       	adc	r31, r29
 17e:	e8 0f       	add	r30, r24
 180:	f1 1d       	adc	r31, r1
 182:	80 81       	ld	r24, Z
 184:	08 2f       	mov	r16, r24
 186:	10 e0       	ldi	r17, 0x00	; 0
    if (zalt<=zahl)
 188:	2e 2d       	mov	r18, r14
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	02 17       	cp	r16, r18
 18e:	13 07       	cpc	r17, r19
 190:	10 f0       	brcs	.+4      	; 0x196 <main+0x6c>
    {
        diff=zahl-zalt;
 192:	8e 19       	sub	r24, r14
 194:	03 c0       	rjmp	.+6      	; 0x19c <main+0x72>
    }
    else
    {
        diff=zalt-zahl;
 196:	9e 2d       	mov	r25, r14
 198:	98 1b       	sub	r25, r24
 19a:	89 2f       	mov	r24, r25
    }
    err= (diff>1)&&!(diff==15);
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	28 f0       	brcs	.+10     	; 0x1aa <main+0x80>
 1a0:	8f 30       	cpi	r24, 0x0F	; 15
 1a2:	31 f4       	brne	.+12     	; 0x1b0 <main+0x86>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <main+0x8a>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x8a>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	f8 2e       	mov	r15, r24
    if (err)
 1b6:	88 23       	and	r24, r24
 1b8:	11 f0       	breq	.+4      	; 0x1be <main+0x94>
    {
        zahl=16;
 1ba:	00 e1       	ldi	r16, 0x10	; 16
    }

//ausgabe
    ledWriteAll(err);
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	99 27       	eor	r25, r25
 1c0:	af df       	rcall	.-162    	; 0x120 <ledWriteAll>
    PORTB=HEX_TO_7SEG[zahl];
 1c2:	f8 01       	movw	r30, r16
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	8c 0f       	add	r24, r28
 1ce:	9d 1f       	adc	r25, r29
 1d0:	e8 0f       	add	r30, r24
 1d2:	f9 1f       	adc	r31, r25
 1d4:	80 81       	ld	r24, Z
 1d6:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d8:	80 e4       	ldi	r24, 0x40	; 64
 1da:	9c e9       	ldi	r25, 0x9C	; 156
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0xb2>
 1e0:	c5 cf       	rjmp	.-118    	; 0x16c <main+0x42>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
