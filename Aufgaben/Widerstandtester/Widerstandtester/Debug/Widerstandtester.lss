
Widerstandtester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000108a  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000da3  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000601  00000000  00000000  00002165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00002768  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000696  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000185  00000000  00000000  00002ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000304b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	63 d0       	rcall	.+198    	; 0x1bc <main>
  f6:	7c c0       	rjmp	.+248    	; 0x1f0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <initBoard>:
} 

uint16_t ledReadAll()
{
    return PORTA|(PORTB<<8);
}
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 b9       	out	0x01, r24	; 1
  fe:	84 b9       	out	0x04, r24	; 4
 100:	17 b8       	out	0x07, r1	; 7
 102:	88 b9       	out	0x08, r24	; 8
 104:	08 95       	ret

00000106 <ledWriteAll>:
 106:	82 b9       	out	0x02, r24	; 2
 108:	95 b9       	out	0x05, r25	; 5
 10a:	08 95       	ret

0000010c <initAdc>:

void initAdc(void)
{
    //PORTF (ADC, X4) Eingang ohne PullUps
    PORTF   = 0x00;
 10c:	11 ba       	out	0x11, r1	; 17
    DDRF    = 0x00;
 10e:	10 ba       	out	0x10, r1	; 16
    //PORTK (ADC-Inputs) alles auf Eingang ohne Pullup
    PORTK   = 0x00;
 110:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
    DDRK    = 0x00;
 114:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    
    ADMUX  = 0x40;    //AVCC Als referenz
 118:	80 e4       	ldi	r24, 0x40	; 64
 11a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
    DIDR0  = 0x0F;    // Digitale Register an ADC pins der Potentiometer deaktivieren
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
    DIDR2  = 0xFF;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7c007d>
    
    ADCSRA = 0b10100111; // ADC einschalten, ADC clok = 16MHz / 128 --> 8us/cycle
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	87 ea       	ldi	r24, 0xA7	; 167
 130:	80 83       	st	Z, r24
    ADCSRB = 0x00;    // Free runing mode
 132:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    
    ADCSRA |=  0b01000000;        // Dummy messung Starten
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
    while((ADCSRA&0x10) == 0);    // Warten bis Messung abgeschllossen
 13c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 140:	84 ff       	sbrs	r24, 4
 142:	fc cf       	rjmp	.-8      	; 0x13c <initAdc+0x30>
    
    ADCSRA &= 0xEF;                // Interruptflage löschen
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8f 7e       	andi	r24, 0xEF	; 239
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <adcRead>:
uint16_t adcRead(uint8_t kanal)
{
    uint16_t messwert = 0;
    
    // Kanal definieren
    ADMUX  = 0x40;    //AVCC Als referenz
 150:	90 e4       	ldi	r25, 0x40	; 64
 152:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
    if(kanal>=8)
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	60 f0       	brcs	.+24     	; 0x172 <adcRead+0x22>
    {    ADMUX  |= kanal-8;
 15a:	ec e7       	ldi	r30, 0x7C	; 124
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	88 50       	subi	r24, 0x08	; 8
 162:	89 2b       	or	r24, r25
 164:	80 83       	st	Z, r24
        ADCSRB |= (3 << MUX5);
 166:	eb e7       	ldi	r30, 0x7B	; 123
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 61       	ori	r24, 0x18	; 24
 16e:	80 83       	st	Z, r24
 170:	0a c0       	rjmp	.+20     	; 0x186 <adcRead+0x36>
    }
    else
    {    ADMUX  |= kanal;
 172:	ec e7       	ldi	r30, 0x7C	; 124
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 81       	ld	r25, Z
 178:	89 2b       	or	r24, r25
 17a:	80 83       	st	Z, r24
        ADCSRB &= ~(3 << MUX5);
 17c:	eb e7       	ldi	r30, 0x7B	; 123
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	87 7e       	andi	r24, 0xE7	; 231
 184:	80 83       	st	Z, r24
    }
    
    
    ADCSRA |=  0b01000000;        // ADC Starten
 186:	ea e7       	ldi	r30, 0x7A	; 122
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	80 83       	st	Z, r24
    while((ADCSRA&0x10) == 0);    // Warten bis Messung abgeschllossen
 190:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 194:	84 ff       	sbrs	r24, 4
 196:	fc cf       	rjmp	.-8      	; 0x190 <adcRead+0x40>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 198:	80 eb       	ldi	r24, 0xB0	; 176
 19a:	94 e0       	ldi	r25, 0x04	; 4
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <adcRead+0x4c>
    
    _delay_us(300);//25 ADC clock cycles
    
    messwert = ADCL;
 1a0:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    messwert |= ADCH <<8;
 1a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	98 2f       	mov	r25, r24
 1ac:	88 27       	eor	r24, r24
    
    ADCSRA &= 0xEF;                // Interruptflage löschen
 1ae:	ea e7       	ldi	r30, 0x7A	; 122
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	20 81       	ld	r18, Z
 1b4:	2f 7e       	andi	r18, 0xEF	; 239
 1b6:	20 83       	st	Z, r18
    
    return messwert;
}
 1b8:	83 2b       	or	r24, r19
 1ba:	08 95       	ret

000001bc <main>:
#include "ADtreiber.h"


int main(void)
{
    initBoard();
 1bc:	9e df       	rcall	.-196    	; 0xfa <initBoard>
    initAdc();
 1be:	a6 df       	rcall	.-180    	; 0x10c <initAdc>
    uint16_t umessung=0;
    uint16_t widerstand=0;
    
    while (1) 
    {
       messwert = 5*adcRead(0);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	c6 df       	rcall	.-116    	; 0x150 <adcRead>
 1c4:	ec 01       	movw	r28, r24
 1c6:	cc 0f       	add	r28, r28
 1c8:	dd 1f       	adc	r29, r29
 1ca:	cc 0f       	add	r28, r28
 1cc:	dd 1f       	adc	r29, r29
 1ce:	c8 0f       	add	r28, r24
 1d0:	d9 1f       	adc	r29, r25
       adcinsgesamt = 5*adcRead(1);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	bd df       	rcall	.-134    	; 0x150 <adcRead>
 1d6:	84 e6       	ldi	r24, 0x64	; 100
       strom = adcinsgesamt-messwert;
       
       widerstand= ((messwert*100));
       
       ledWriteAll(widerstand);
 1d8:	28 2f       	mov	r18, r24
 1da:	2c 9f       	mul	r18, r28
 1dc:	c0 01       	movw	r24, r0
 1de:	2d 9f       	mul	r18, r29
 1e0:	90 0d       	add	r25, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	90 df       	rcall	.-224    	; 0x106 <ledWriteAll>
 1e6:	80 e4       	ldi	r24, 0x40	; 64
 1e8:	9c e9       	ldi	r25, 0x9C	; 156
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x2e>
 1ee:	e8 cf       	rjmp	.-48     	; 0x1c0 <main+0x4>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
