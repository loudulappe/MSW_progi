
LED-show.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001166  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d0e  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000675  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005eb  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000399  00000000  00000000  00002f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	ac d0       	rcall	.+344    	; 0x24e <main>
  f6:	b6 c0       	rjmp	.+364    	; 0x264 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <initBoard>:
        PORTB = PORTB | ((ledNr0_15>7)<<(ledNr0_15-8));
    } 
    else
    {
        PORTA = PORTA & ~(1<< (ledNr0_15));
        PORTB = PORTB & ~((ledNr0_15>7)<<(ledNr0_15-8)) ;       
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 b9       	out	0x01, r24	; 1
  fe:	84 b9       	out	0x04, r24	; 4
 100:	08 95       	ret

00000102 <ledWriteAll>:
 102:	82 b9       	out	0x02, r24	; 2
 104:	95 b9       	out	0x05, r25	; 5
 106:	08 95       	ret

00000108 <ledReadAll>:
    }
} 
uint16_t ledReadAll()
{
    return PORTA|(PORTB<<8);
 108:	22 b1       	in	r18, 0x02	; 2
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	98 2f       	mov	r25, r24
 110:	88 27       	eor	r24, r24
 112:	82 2b       	or	r24, r18
 114:	08 95       	ret

00000116 <aufgabe1>:
    }

}

void aufgabe1(void)
{
 116:	cf 93       	push	r28
    uint8_t i = 0;
    for (i=0; i<16; i= i+1)
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	14 c0       	rjmp	.+40     	; 0x144 <aufgabe1+0x2e>
    {
        ledWriteAll(1<<i);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0c 2e       	mov	r0, r28
 122:	02 c0       	rjmp	.+4      	; 0x128 <aufgabe1+0x12>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <aufgabe1+0xe>
 12c:	ea df       	rcall	.-44     	; 0x102 <ledWriteAll>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 12e:	8c e2       	ldi	r24, 0x2C	; 44
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	05 c0       	rjmp	.+10     	; 0x13e <aufgabe1+0x28>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 134:	e0 e9       	ldi	r30, 0x90	; 144
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <aufgabe1+0x22>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	c9 f7       	brne	.-14     	; 0x134 <aufgabe1+0x1e>
}

void aufgabe1(void)
{
    uint8_t i = 0;
    for (i=0; i<16; i= i+1)
 142:	cf 5f       	subi	r28, 0xFF	; 255
 144:	c0 31       	cpi	r28, 0x10	; 16
 146:	50 f3       	brcs	.-44     	; 0x11c <aufgabe1+0x6>
    {
        ledWriteAll(1<<i);
        _delay_ms(30);
    }
}
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <aufgabe2>:

void aufgabe2(void)
{
 14c:	cf 93       	push	r28
    uint8_t i = 0;
    for (i=0; i<16; i= i+1)
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	14 c0       	rjmp	.+40     	; 0x17a <aufgabe2+0x2e>
    {
        ledWriteAll(1<<i);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0c 2e       	mov	r0, r28
 158:	02 c0       	rjmp	.+4      	; 0x15e <aufgabe2+0x12>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <aufgabe2+0xe>
 162:	cf df       	rcall	.-98     	; 0x102 <ledWriteAll>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 164:	8c e2       	ldi	r24, 0x2C	; 44
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	05 c0       	rjmp	.+10     	; 0x174 <aufgabe2+0x28>
 16a:	e0 e9       	ldi	r30, 0x90	; 144
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <aufgabe2+0x22>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 172:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	c9 f7       	brne	.-14     	; 0x16a <aufgabe2+0x1e>
}

void aufgabe2(void)
{
    uint8_t i = 0;
    for (i=0; i<16; i= i+1)
 178:	cf 5f       	subi	r28, 0xFF	; 255
 17a:	c0 31       	cpi	r28, 0x10	; 16
 17c:	50 f3       	brcs	.-44     	; 0x152 <aufgabe2+0x6>
 17e:	cf e0       	ldi	r28, 0x0F	; 15
 180:	14 c0       	rjmp	.+40     	; 0x1aa <aufgabe2+0x5e>
        _delay_ms(30);
    }
    uint8_t e = 15;
    for (e=15; e>0; e= e-1)
    {
        ledWriteAll(1<<e);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0c 2e       	mov	r0, r28
 188:	02 c0       	rjmp	.+4      	; 0x18e <aufgabe2+0x42>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <aufgabe2+0x3e>
 192:	b7 df       	rcall	.-146    	; 0x102 <ledWriteAll>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 194:	8c e2       	ldi	r24, 0x2C	; 44
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <aufgabe2+0x58>
 19a:	e0 e9       	ldi	r30, 0x90	; 144
 19c:	f1 e0       	ldi	r31, 0x01	; 1
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <aufgabe2+0x52>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	c9 f7       	brne	.-14     	; 0x19a <aufgabe2+0x4e>
    {
        ledWriteAll(1<<i);
        _delay_ms(30);
    }
    uint8_t e = 15;
    for (e=15; e>0; e= e-1)
 1a8:	c1 50       	subi	r28, 0x01	; 1
 1aa:	c1 11       	cpse	r28, r1
 1ac:	ea cf       	rjmp	.-44     	; 0x182 <aufgabe2+0x36>
    {
        ledWriteAll(1<<e);
        _delay_ms(30);
    }
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <aufgabe3>:

void aufgabe3(void)
{
    ledWriteAll(0);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	a5 df       	rcall	.-182    	; 0x102 <ledWriteAll>
    uint8_t i=0;
    for (i=0; i<16; i=i+1)
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	28 c0       	rjmp	.+80     	; 0x20c <aufgabe3+0x5a>
    {
        PORTA=PORTA|1<<i;
 1bc:	32 b1       	in	r19, 0x02	; 2
 1be:	42 2f       	mov	r20, r18
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 2e       	mov	r0, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <aufgabe3+0x1c>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <aufgabe3+0x18>
 1d2:	83 2b       	or	r24, r19
 1d4:	82 b9       	out	0x02, r24	; 2
        PORTB=PORTB|((i>7)<<(i-8));
 1d6:	35 b1       	in	r19, 0x05	; 5
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	28 30       	cpi	r18, 0x08	; 8
 1de:	10 f4       	brcc	.+4      	; 0x1e4 <aufgabe3+0x32>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	48 50       	subi	r20, 0x08	; 8
 1e6:	51 09       	sbc	r21, r1
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <aufgabe3+0x3c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	4a 95       	dec	r20
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <aufgabe3+0x38>
 1f2:	83 2b       	or	r24, r19
 1f4:	85 b9       	out	0x05, r24	; 5
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f6:	8c e2       	ldi	r24, 0x2C	; 44
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <aufgabe3+0x54>
 1fc:	e0 e9       	ldi	r30, 0x90	; 144
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <aufgabe3+0x4e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 204:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	c9 f7       	brne	.-14     	; 0x1fc <aufgabe3+0x4a>

void aufgabe3(void)
{
    ledWriteAll(0);
    uint8_t i=0;
    for (i=0; i<16; i=i+1)
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	20 31       	cpi	r18, 0x10	; 16
 20e:	b0 f2       	brcs	.-84     	; 0x1bc <aufgabe3+0xa>
    {
        PORTA=PORTA|1<<i;
        PORTB=PORTB|((i>7)<<(i-8));
        _delay_ms(30);
    }
}
 210:	08 95       	ret

00000212 <aufgabe4>:

void aufgabe4(void)
{
 212:	cf 93       	push	r28
    uint8_t i=0;
    for (i=0; i<16; i=i+1)
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	17 c0       	rjmp	.+46     	; 0x246 <aufgabe4+0x34>
    {
        ledWriteAll(ledReadAll()^(1<<i));
 218:	77 df       	rcall	.-274    	; 0x108 <ledReadAll>
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	0c 2e       	mov	r0, r28
 220:	02 c0       	rjmp	.+4      	; 0x226 <aufgabe4+0x14>
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <aufgabe4+0x10>
 22a:	82 27       	eor	r24, r18
 22c:	93 27       	eor	r25, r19
 22e:	69 df       	rcall	.-302    	; 0x102 <ledWriteAll>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 230:	8c e2       	ldi	r24, 0x2C	; 44
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	05 c0       	rjmp	.+10     	; 0x240 <aufgabe4+0x2e>
 236:	e0 e9       	ldi	r30, 0x90	; 144
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <aufgabe4+0x28>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	c9 f7       	brne	.-14     	; 0x236 <aufgabe4+0x24>
}

void aufgabe4(void)
{
    uint8_t i=0;
    for (i=0; i<16; i=i+1)
 244:	cf 5f       	subi	r28, 0xFF	; 255
 246:	c0 31       	cpi	r28, 0x10	; 16
 248:	38 f3       	brcs	.-50     	; 0x218 <aufgabe4+0x6>
    {
        ledWriteAll(ledReadAll()^(1<<i));
        _delay_ms(30);
    }
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <main>:
void aufgabe5(void);
void aufgabe6(void);

int main(void)
{
    initBoard();
 24e:	55 df       	rcall	.-342    	; 0xfa <initBoard>
    while (1)
    {
        aufgabe1();
 250:	62 df       	rcall	.-316    	; 0x116 <aufgabe1>
        aufgabe2();
 252:	7c df       	rcall	.-264    	; 0x14c <aufgabe2>
 254:	80 ee       	ldi	r24, 0xE0	; 224
 256:	9e e2       	ldi	r25, 0x2E	; 46
 258:	01 97       	sbiw	r24, 0x01	; 1
        _delay_ms(3);
        aufgabe4();
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0xa>
 25c:	da df       	rcall	.-76     	; 0x212 <aufgabe4>
        aufgabe4();
 25e:	d9 df       	rcall	.-78     	; 0x212 <aufgabe4>
 260:	a8 df       	rcall	.-176    	; 0x1b2 <aufgabe3>
        aufgabe3();
 262:	f6 cf       	rjmp	.-20     	; 0x250 <main+0x2>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
