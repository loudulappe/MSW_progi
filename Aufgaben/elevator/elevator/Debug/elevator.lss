
elevator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800208  00800208  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002521  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f22  00000000  00000000  00002b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001513  00000000  00000000  00003a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  00004f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ccf  00000000  00000000  000055c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ae8  00000000  00000000  00006297  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00007d7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ef       	ldi	r30, 0xF0	; 240
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 38       	cpi	r26, 0x86	; 134
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	e5 c0       	rjmp	.+458    	; 0x2ec <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
    uint8_t loc=0;
    uint8_t target=0;
    
    while (1) 
    {
        swin=switchReadAll();
 124:	07 d0       	rcall	.+14     	; 0x134 <switchReadAll>
        target=swin&INTARGET;
        ledWriteAll(INLOC);
 126:	87 e0       	ldi	r24, 0x07	; 7
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 d0       	rcall	.+2      	; 0x12e <ledWriteAll>
 12c:	fb cf       	rjmp	.-10     	; 0x124 <main>

0000012e <ledWriteAll>:
            }
        }
        matrix_buffer_pos += breite + Zeichenabstand;           // Position für das nächste Zeichen berechnen
        str_p++;                                                // Zeichen-Zeiger auf das nächste Zeichen richten
    }
}
 12e:	82 b9       	out	0x02, r24	; 2
 130:	95 b9       	out	0x05, r25	; 5
 132:	08 95       	ret

00000134 <switchReadAll>:
 134:	86 b1       	in	r24, 0x06	; 6
 136:	08 95       	ret

00000138 <matrixWriteNextLine>:




void matrixWriteNextLine(void)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	28 97       	sbiw	r28, 0x08	; 8
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
    const  uint8_t Bit_Muster_Tab[8] = {1,2,4,8,16,32,64,128};
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	e0 e0       	ldi	r30, 0x00	; 0
 150:	f2 e0       	ldi	r31, 0x02	; 2
 152:	de 01       	movw	r26, r28
 154:	11 96       	adiw	r26, 0x01	; 1
 156:	01 90       	ld	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	8a 95       	dec	r24
 15c:	e1 f7       	brne	.-8      	; 0x156 <matrixWriteNextLine+0x1e>
    static uint16_t Zeilen_Nr, Bit_Muster;
    uint8_t i;
    
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben
 15e:	e5 e0       	ldi	r30, 0x05	; 5
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	80 81       	ld	r24, Z
 164:	8f 7b       	andi	r24, 0xBF	; 191
 166:	80 83       	st	Z, r24

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
 168:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <Zeilen_Nr.2743>
 16c:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <Zeilen_Nr.2743+0x1>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	8c 0f       	add	r24, r28
 176:	9d 1f       	adc	r25, r29
 178:	e8 0f       	add	r30, r24
 17a:	f9 1f       	adc	r31, r25
 17c:	80 81       	ld	r24, Z
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 184:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	26 c0       	rjmp	.+76     	; 0x1d8 <matrixWriteNextLine+0xa0>
    {                                       // Vergleicht Bit-Muster der aktuellen Zeile mit Daten in matrix[]
        if((matrix[Anzahl_Spalten-1- i] & Bit_Muster) != 0)     // Ist in matrix[] das entsprechende Bit gesetzt?
 18c:	e7 e3       	ldi	r30, 0x37	; 55
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e8 1b       	sub	r30, r24
 192:	f1 09       	sbc	r31, r1
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ea 5e       	subi	r30, 0xEA	; 234
 19a:	fd 4f       	sbci	r31, 0xFD	; 253
 19c:	40 81       	ld	r20, Z
 19e:	51 81       	ldd	r21, Z+1	; 0x01
 1a0:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__data_end>
 1a4:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__data_end+0x1>
 1a8:	24 23       	and	r18, r20
 1aa:	35 23       	and	r19, r21
 1ac:	23 2b       	or	r18, r19
 1ae:	31 f0       	breq	.+12     	; 0x1bc <matrixWriteNextLine+0x84>
        { DATA_Modul_1_ON;                    //   JA:   ==> Datenbit "1" ins Schieberegister schreiben
 1b0:	e5 e0       	ldi	r30, 0x05	; 5
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	90 81       	ld	r25, Z
 1b6:	90 62       	ori	r25, 0x20	; 32
 1b8:	90 83       	st	Z, r25
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <matrixWriteNextLine+0x8e>
        }
        else
        { DATA_Modul_1_OFF;                   //   NEIN: ==> Datenbit "0" ins Schieberegister schreiben
 1bc:	e5 e0       	ldi	r30, 0x05	; 5
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	90 81       	ld	r25, Z
 1c2:	9f 7d       	andi	r25, 0xDF	; 223
 1c4:	90 83       	st	Z, r25
        }
        CLOCK_1;
 1c6:	e5 e0       	ldi	r30, 0x05	; 5
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	90 81       	ld	r25, Z
 1cc:	90 61       	ori	r25, 0x10	; 16
 1ce:	90 83       	st	Z, r25
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
 1d0:	90 81       	ld	r25, Z
 1d2:	9f 7e       	andi	r25, 0xEF	; 239
 1d4:	90 83       	st	Z, r25
    STROBE_0;                             // Daten des Scheiberegisters nicht ins Latch schreiben

    Bit_Muster = Bit_Muster_Tab[Zeilen_Nr]; // Bitmuster aus Tabelle holen, um mit Daten in matrix[] zu vergleichen.
    
    // Alle Bits seriell ins Schieberegister hineinschreiben
    for(i=0; i<Anzahl_Spalten; i++)         // Alle Spalten durchgehen und überpüfen, ob Bit gesetzt ist
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	88 33       	cpi	r24, 0x38	; 56
 1da:	c0 f2       	brcs	.-80     	; 0x18c <matrixWriteNextLine+0x54>
        }
        CLOCK_1;
        CLOCK_0;                            // Datenbit wird bei der negativen Flanke des Clock-Signals übernommen
    }
    
    ENABLE_0;                                // +5V aller Zeilen abschalten
 1dc:	e5 e0       	ldi	r30, 0x05	; 5
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	80 81       	ld	r24, Z
 1e2:	87 7f       	andi	r24, 0xF7	; 247
 1e4:	80 83       	st	Z, r24
    PORTJ &= ~0x07;
 1e6:	80 81       	ld	r24, Z
 1e8:	88 7f       	andi	r24, 0xF8	; 248
 1ea:	80 83       	st	Z, r24
    PORTJ |= Zeilen_Nr;                     // gewünschte Zeile einstellen
 1ec:	90 81       	ld	r25, Z
 1ee:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Zeilen_Nr.2743>
 1f2:	89 2b       	or	r24, r25
 1f4:	80 83       	st	Z, r24
    STROBE_1;                             // Daten ins Latch schreiben
 1f6:	80 81       	ld	r24, Z
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	80 83       	st	Z, r24
    ENABLE_1;                             // +5V Speisung der eingestellten Zeile einschalten
 1fc:	80 81       	ld	r24, Z
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	80 83       	st	Z, r24

    // Die Zeilen werden nacheinander eingeschaltet --> zyklisch 0,1,2,3,4,5,6,7, 0,1,2,3, ...
    if (Zeilen_Nr < 7)
 202:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Zeilen_Nr.2743>
 206:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Zeilen_Nr.2743+0x1>
 20a:	87 30       	cpi	r24, 0x07	; 7
 20c:	91 05       	cpc	r25, r1
 20e:	30 f4       	brcc	.+12     	; 0x21c <matrixWriteNextLine+0xe4>
    {
        Zeilen_Nr++;
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Zeilen_Nr.2743+0x1>
 216:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Zeilen_Nr.2743>
 21a:	07 c0       	rjmp	.+14     	; 0x22a <matrixWriteNextLine+0xf2>
    }
    else
    {
        Zeilen_Nr = 0;
 21c:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <Zeilen_Nr.2743+0x1>
 220:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Zeilen_Nr.2743>
        writeTextFinished = 1;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <writeTextFinished>
    }
    
 22a:	28 96       	adiw	r28, 0x08	; 8
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <__vector_23>:
//--------------------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 1ms aufgerufen
//--------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	0b b6       	in	r0, 0x3b	; 59
 248:	0f 92       	push	r0
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
    systemTimeMs += 1;
 262:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <systemTimeMs>
 266:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <systemTimeMs+0x1>
 26a:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <systemTimeMs+0x2>
 26e:	50 91 10 02 	lds	r21, 0x0210	; 0x800210 <systemTimeMs+0x3>
 272:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <systemTimeMs+0x4>
 276:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <systemTimeMs+0x5>
 27a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <systemTimeMs+0x6>
 27e:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <systemTimeMs+0x7>
 282:	a1 e0       	ldi	r26, 0x01	; 1
 284:	27 d0       	rcall	.+78     	; 0x2d4 <__adddi3_s8>
 286:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <systemTimeMs>
 28a:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <systemTimeMs+0x1>
 28e:	40 93 0f 02 	sts	0x020F, r20	; 0x80020f <systemTimeMs+0x2>
 292:	50 93 10 02 	sts	0x0210, r21	; 0x800210 <systemTimeMs+0x3>
 296:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <systemTimeMs+0x4>
 29a:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <systemTimeMs+0x5>
 29e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <systemTimeMs+0x6>
 2a2:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <systemTimeMs+0x7>

    if(matrixRunning)matrixWriteNextLine();
 2a6:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <matrixRunning>
 2aa:	81 11       	cpse	r24, r1
 2ac:	45 df       	rcall	.-374    	; 0x138 <matrixWriteNextLine>
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0b be       	out	0x3b, r0	; 59
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <__adddi3_s8>:
 2d4:	00 24       	eor	r0, r0
 2d6:	a7 fd       	sbrc	r26, 7
 2d8:	00 94       	com	r0
 2da:	2a 0f       	add	r18, r26
 2dc:	30 1d       	adc	r19, r0
 2de:	40 1d       	adc	r20, r0
 2e0:	50 1d       	adc	r21, r0
 2e2:	60 1d       	adc	r22, r0
 2e4:	70 1d       	adc	r23, r0
 2e6:	80 1d       	adc	r24, r0
 2e8:	90 1d       	adc	r25, r0
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
