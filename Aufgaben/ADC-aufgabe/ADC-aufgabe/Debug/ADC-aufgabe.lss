
ADC-aufgabe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f31  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d14  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000510  00000000  00000000  00001fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000024f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000604  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011e  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002cae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	62 d0       	rcall	.+196    	; 0x1ba <main>
  f6:	ba c0       	rjmp	.+372    	; 0x26c <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <ledWriteAll>:
} 

uint16_t ledReadAll()
{
    return PORTA|(PORTB<<8);
}
  fa:	82 b9       	out	0x02, r24	; 2
  fc:	95 b9       	out	0x05, r25	; 5
  fe:	08 95       	ret

00000100 <initAdc>:

void initAdc(void)
{
    //PORTF (ADC, X4) Eingang ohne PullUps
    PORTF   = 0x00;
 100:	11 ba       	out	0x11, r1	; 17
    DDRF    = 0x00;
 102:	10 ba       	out	0x10, r1	; 16
    //PORTK (ADC-Inputs) alles auf Eingang ohne Pullup
    PORTK   = 0x00;
 104:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
    DDRK    = 0x00;
 108:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
    
    ADMUX  = 0x40;    //AVCC Als referenz
 10c:	80 e4       	ldi	r24, 0x40	; 64
 10e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
    DIDR0  = 0x0F;    // Digitale Register an ADC pins der Potentiometer deaktivieren
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
    DIDR2  = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7c007d>
    
    ADCSRA = 0b10100111; // ADC einschalten, ADC clok = 16MHz / 128 --> 8us/cycle
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	87 ea       	ldi	r24, 0xA7	; 167
 124:	80 83       	st	Z, r24
    ADCSRB = 0x00;    // Free runing mode
 126:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    
    ADCSRA |=  0b01000000;        // Dummy messung Starten
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
    while((ADCSRA&0x10) == 0);    // Warten bis Messung abgeschllossen
 130:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 134:	84 ff       	sbrs	r24, 4
 136:	fc cf       	rjmp	.-8      	; 0x130 <initAdc+0x30>
    
    ADCSRA &= 0xEF;                // Interruptflage löschen
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8f 7e       	andi	r24, 0xEF	; 239
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <initBoard>:

#include "ADtreiber.h"

void initBoard(void)
{
    initAdc();
 144:	dd df       	rcall	.-70     	; 0x100 <initAdc>
    DDRA = 0xff;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xff;
 14a:	84 b9       	out	0x04, r24	; 4
 14c:	08 95       	ret

0000014e <adcRead>:
uint16_t adcRead(uint8_t kanal)
{
    uint16_t messwert = 0;
    
    // Kanal definieren
    ADMUX  = 0x40;    //AVCC Als referenz
 14e:	90 e4       	ldi	r25, 0x40	; 64
 150:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
    if(kanal>=8)
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	60 f0       	brcs	.+24     	; 0x170 <adcRead+0x22>
    {    ADMUX  |= kanal-8;
 158:	ec e7       	ldi	r30, 0x7C	; 124
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	90 81       	ld	r25, Z
 15e:	88 50       	subi	r24, 0x08	; 8
 160:	89 2b       	or	r24, r25
 162:	80 83       	st	Z, r24
        ADCSRB |= (3 << MUX5);
 164:	eb e7       	ldi	r30, 0x7B	; 123
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 61       	ori	r24, 0x18	; 24
 16c:	80 83       	st	Z, r24
 16e:	0a c0       	rjmp	.+20     	; 0x184 <adcRead+0x36>
    }
    else
    {    ADMUX  |= kanal;
 170:	ec e7       	ldi	r30, 0x7C	; 124
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	90 81       	ld	r25, Z
 176:	89 2b       	or	r24, r25
 178:	80 83       	st	Z, r24
        ADCSRB &= ~(3 << MUX5);
 17a:	eb e7       	ldi	r30, 0x7B	; 123
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	87 7e       	andi	r24, 0xE7	; 231
 182:	80 83       	st	Z, r24
    }
    
    
    ADCSRA |=  0b01000000;        // ADC Starten
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 64       	ori	r24, 0x40	; 64
 18c:	80 83       	st	Z, r24
    while((ADCSRA&0x10) == 0);    // Warten bis Messung abgeschllossen
 18e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 192:	84 ff       	sbrs	r24, 4
 194:	fc cf       	rjmp	.-8      	; 0x18e <adcRead+0x40>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 196:	80 eb       	ldi	r24, 0xB0	; 176
 198:	94 e0       	ldi	r25, 0x04	; 4
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <adcRead+0x4c>
    
    _delay_us(300);//25 ADC clock cycles
    
    messwert = ADCL;
 19e:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    messwert |= ADCH <<8;
 1a2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	98 2f       	mov	r25, r24
 1aa:	88 27       	eor	r24, r24
    
    ADCSRA &= 0xEF;                // Interruptflage löschen
 1ac:	ea e7       	ldi	r30, 0x7A	; 122
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	20 81       	ld	r18, Z
 1b2:	2f 7e       	andi	r18, 0xEF	; 239
 1b4:	20 83       	st	Z, r18
    
    return messwert;
 1b6:	83 2b       	or	r24, r19
 1b8:	08 95       	ret

000001ba <main>:
#include "ADtreiber.h"


int main(void)
{
    initBoard();
 1ba:	c4 df       	rcall	.-120    	; 0x144 <initBoard>
    while (1) 
    {
        uint16_t LEDanzahl = 1600/(102300/adcRead(0));
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	c7 df       	rcall	.-114    	; 0x14e <adcRead>
 1c0:	9c 01       	movw	r18, r24
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	6c e9       	ldi	r22, 0x9C	; 156
 1c8:	7f e8       	ldi	r23, 0x8F	; 143
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	10 d0       	rcall	.+32     	; 0x1f0 <__divmodsi4>
 1d0:	60 e4       	ldi	r22, 0x40	; 64
 1d2:	76 e0       	ldi	r23, 0x06	; 6
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0b d0       	rcall	.+22     	; 0x1f0 <__divmodsi4>
        ledWriteAll(~(0xfff >> LEDanzahl));
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	9f e0       	ldi	r25, 0x0F	; 15
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <main+0x2a>
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <main+0x26>
 1e8:	80 95       	com	r24
 1ea:	90 95       	com	r25
 1ec:	86 df       	rcall	.-244    	; 0xfa <ledWriteAll>
 1ee:	e6 cf       	rjmp	.-52     	; 0x1bc <main+0x2>

000001f0 <__divmodsi4>:
 1f0:	05 2e       	mov	r0, r21
 1f2:	97 fb       	bst	r25, 7
 1f4:	16 f4       	brtc	.+4      	; 0x1fa <__divmodsi4+0xa>
 1f6:	00 94       	com	r0
 1f8:	0f d0       	rcall	.+30     	; 0x218 <__negsi2>
 1fa:	57 fd       	sbrc	r21, 7
 1fc:	05 d0       	rcall	.+10     	; 0x208 <__divmodsi4_neg2>
 1fe:	14 d0       	rcall	.+40     	; 0x228 <__udivmodsi4>
 200:	07 fc       	sbrc	r0, 7
 202:	02 d0       	rcall	.+4      	; 0x208 <__divmodsi4_neg2>
 204:	46 f4       	brtc	.+16     	; 0x216 <__divmodsi4_exit>
 206:	08 c0       	rjmp	.+16     	; 0x218 <__negsi2>

00000208 <__divmodsi4_neg2>:
 208:	50 95       	com	r21
 20a:	40 95       	com	r20
 20c:	30 95       	com	r19
 20e:	21 95       	neg	r18
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	4f 4f       	sbci	r20, 0xFF	; 255
 214:	5f 4f       	sbci	r21, 0xFF	; 255

00000216 <__divmodsi4_exit>:
 216:	08 95       	ret

00000218 <__negsi2>:
 218:	90 95       	com	r25
 21a:	80 95       	com	r24
 21c:	70 95       	com	r23
 21e:	61 95       	neg	r22
 220:	7f 4f       	sbci	r23, 0xFF	; 255
 222:	8f 4f       	sbci	r24, 0xFF	; 255
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	08 95       	ret

00000228 <__udivmodsi4>:
 228:	a1 e2       	ldi	r26, 0x21	; 33
 22a:	1a 2e       	mov	r1, r26
 22c:	aa 1b       	sub	r26, r26
 22e:	bb 1b       	sub	r27, r27
 230:	fd 01       	movw	r30, r26
 232:	0d c0       	rjmp	.+26     	; 0x24e <__udivmodsi4_ep>

00000234 <__udivmodsi4_loop>:
 234:	aa 1f       	adc	r26, r26
 236:	bb 1f       	adc	r27, r27
 238:	ee 1f       	adc	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	a2 17       	cp	r26, r18
 23e:	b3 07       	cpc	r27, r19
 240:	e4 07       	cpc	r30, r20
 242:	f5 07       	cpc	r31, r21
 244:	20 f0       	brcs	.+8      	; 0x24e <__udivmodsi4_ep>
 246:	a2 1b       	sub	r26, r18
 248:	b3 0b       	sbc	r27, r19
 24a:	e4 0b       	sbc	r30, r20
 24c:	f5 0b       	sbc	r31, r21

0000024e <__udivmodsi4_ep>:
 24e:	66 1f       	adc	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	1a 94       	dec	r1
 258:	69 f7       	brne	.-38     	; 0x234 <__udivmodsi4_loop>
 25a:	60 95       	com	r22
 25c:	70 95       	com	r23
 25e:	80 95       	com	r24
 260:	90 95       	com	r25
 262:	9b 01       	movw	r18, r22
 264:	ac 01       	movw	r20, r24
 266:	bd 01       	movw	r22, r26
 268:	cf 01       	movw	r24, r30
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
