
array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800200  0000029a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001005  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d39  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061e  00000000  00000000  00002206  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00002824  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000661  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030e  00000000  00000000  00002f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000326f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e9       	ldi	r30, 0x9A	; 154
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 3c       	cpi	r26, 0xC8	; 200
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	08 d0       	rcall	.+16     	; 0x120 <main>
 110:	c2 c0       	rjmp	.+388    	; 0x296 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <initBoard>:

#include "ADtreiber.h"

void initBoard(void)
{
    DDRA = 0xff;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xff;
 118:	84 b9       	out	0x04, r24	; 4
    DDRC = 0;
 11a:	17 b8       	out	0x07, r1	; 7
    PORTC = 0xff;
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	08 95       	ret

00000120 <main>:
#define systemtakt      30
#define SIZE            100
#pragma GCC optimize 0

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	c0 5a       	subi	r28, 0xA0	; 160
 12a:	d1 40       	sbci	r29, 0x01	; 1
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
    initBoard();
 136:	ee df       	rcall	.-36     	; 0x114 <initBoard>
    uint16_t testArray[SIZE] =
 138:	88 ec       	ldi	r24, 0xC8	; 200
 13a:	e0 e0       	ldi	r30, 0x00	; 0
 13c:	f2 e0       	ldi	r31, 0x02	; 2
 13e:	de 01       	movw	r26, r28
 140:	51 96       	adiw	r26, 0x11	; 17
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	8a 95       	dec	r24
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x22>
        55355, 57460,  5127, 36927, 15777,  4002, 32450, 18189,  8480, 16396,
        27911, 11533, 16461, 40099, 31239, 53667, 39818,  2253, 62228,  2284,
         5797, 65271,  1783, 61756, 23743, 26248,  2212,  4002, 31030, 47946,
        11933, 22958, 61231, 57095, 39850, 39160, 47316, 53204, 20357,  2753
    };
    uint16_t Ergebnis[SIZE] ={0};
 14a:	ce 01       	movw	r24, r28
 14c:	87 52       	subi	r24, 0x27	; 39
 14e:	9f 4f       	sbci	r25, 0xFF	; 255
 150:	28 ec       	ldi	r18, 0xC8	; 200
 152:	fc 01       	movw	r30, r24
 154:	32 2f       	mov	r19, r18
 156:	11 92       	st	Z+, r1
 158:	3a 95       	dec	r19
 15a:	e9 f7       	brne	.-6      	; 0x156 <main+0x36>
    uint16_t counter=0;
 15c:	1a 82       	std	Y+2, r1	; 0x02
 15e:	19 82       	std	Y+1, r1	; 0x01
    uint16_t border=0;
 160:	1e 86       	std	Y+14, r1	; 0x0e
 162:	1d 86       	std	Y+13, r1	; 0x0d
    uint16_t stelle=0;
 164:	1c 82       	std	Y+4, r1	; 0x04
 166:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t zwischenspeicher2=0;
 168:	18 8a       	std	Y+16, r1	; 0x10
 16a:	1f 86       	std	Y+15, r1	; 0x0f
    uint16_t limit=0;
 16c:	1e 82       	std	Y+6, r1	; 0x06
 16e:	1d 82       	std	Y+5, r1	; 0x05
    for (uint16_t i=0; i<SIZE; i=i+1)
 170:	18 86       	std	Y+8, r1	; 0x08
 172:	1f 82       	std	Y+7, r1	; 0x07
 174:	26 c0       	rjmp	.+76     	; 0x1c2 <main+0xa2>
        {
        if (testArray[i]>limit)
 176:	8f 81       	ldd	r24, Y+7	; 0x07
 178:	98 85       	ldd	r25, Y+8	; 0x08
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	9e 01       	movw	r18, r28
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	3f 4f       	sbci	r19, 0xFF	; 255
 184:	82 0f       	add	r24, r18
 186:	93 1f       	adc	r25, r19
 188:	40 96       	adiw	r24, 0x10	; 16
 18a:	fc 01       	movw	r30, r24
 18c:	20 81       	ld	r18, Z
 18e:	31 81       	ldd	r19, Z+1	; 0x01
 190:	8d 81       	ldd	r24, Y+5	; 0x05
 192:	9e 81       	ldd	r25, Y+6	; 0x06
 194:	82 17       	cp	r24, r18
 196:	93 07       	cpc	r25, r19
 198:	78 f4       	brcc	.+30     	; 0x1b8 <main+0x98>
        {
            limit=testArray[i];
 19a:	8f 81       	ldd	r24, Y+7	; 0x07
 19c:	98 85       	ldd	r25, Y+8	; 0x08
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	9e 01       	movw	r18, r28
 1a4:	2f 5f       	subi	r18, 0xFF	; 255
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	40 96       	adiw	r24, 0x10	; 16
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	91 81       	ldd	r25, Z+1	; 0x01
 1b4:	9e 83       	std	Y+6, r25	; 0x06
 1b6:	8d 83       	std	Y+5, r24	; 0x05
    uint16_t counter=0;
    uint16_t border=0;
    uint16_t stelle=0;
    uint16_t zwischenspeicher2=0;
    uint16_t limit=0;
    for (uint16_t i=0; i<SIZE; i=i+1)
 1b8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ba:	98 85       	ldd	r25, Y+8	; 0x08
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	98 87       	std	Y+8, r25	; 0x08
 1c0:	8f 83       	std	Y+7, r24	; 0x07
 1c2:	8f 81       	ldd	r24, Y+7	; 0x07
 1c4:	98 85       	ldd	r25, Y+8	; 0x08
 1c6:	84 36       	cpi	r24, 0x64	; 100
 1c8:	91 05       	cpc	r25, r1
 1ca:	a8 f2       	brcs	.-86     	; 0x176 <main+0x56>
        if (testArray[i]>limit)
        {
            limit=testArray[i];
        }
    }
    for (uint16_t i=0; i<=limit; i=i+1)
 1cc:	1a 86       	std	Y+10, r1	; 0x0a
 1ce:	19 86       	std	Y+9, r1	; 0x09
 1d0:	4e c0       	rjmp	.+156    	; 0x26e <main+0x14e>
    {
        for (uint16_t j=0; j<SIZE; j=j+1)
 1d2:	1c 86       	std	Y+12, r1	; 0x0c
 1d4:	1b 86       	std	Y+11, r1	; 0x0b
 1d6:	1c c0       	rjmp	.+56     	; 0x210 <main+0xf0>
        {
            if (testArray[j]==i)
 1d8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1da:	9c 85       	ldd	r25, Y+12	; 0x0c
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	9e 01       	movw	r18, r28
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19
 1ea:	40 96       	adiw	r24, 0x10	; 16
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	31 81       	ldd	r19, Z+1	; 0x01
 1f2:	89 85       	ldd	r24, Y+9	; 0x09
 1f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f6:	28 17       	cp	r18, r24
 1f8:	39 07       	cpc	r19, r25
 1fa:	29 f4       	brne	.+10     	; 0x206 <main+0xe6>
            {
                counter=counter+1;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
            limit=testArray[i];
        }
    }
    for (uint16_t i=0; i<=limit; i=i+1)
    {
        for (uint16_t j=0; j<SIZE; j=j+1)
 206:	8b 85       	ldd	r24, Y+11	; 0x0b
 208:	9c 85       	ldd	r25, Y+12	; 0x0c
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	9c 87       	std	Y+12, r25	; 0x0c
 20e:	8b 87       	std	Y+11, r24	; 0x0b
 210:	8b 85       	ldd	r24, Y+11	; 0x0b
 212:	9c 85       	ldd	r25, Y+12	; 0x0c
 214:	84 36       	cpi	r24, 0x64	; 100
 216:	91 05       	cpc	r25, r1
 218:	f8 f2       	brcs	.-66     	; 0x1d8 <main+0xb8>
            if (testArray[j]==i)
            {
                counter=counter+1;
            }
        }
        border=stelle+counter;
 21a:	2b 81       	ldd	r18, Y+3	; 0x03
 21c:	3c 81       	ldd	r19, Y+4	; 0x04
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	82 0f       	add	r24, r18
 224:	93 1f       	adc	r25, r19
 226:	9e 87       	std	Y+14, r25	; 0x0e
 228:	8d 87       	std	Y+13, r24	; 0x0d
        while (stelle<border)
 22a:	13 c0       	rjmp	.+38     	; 0x252 <main+0x132>
        {
            Ergebnis[stelle]=i;
 22c:	9e 01       	movw	r18, r28
 22e:	27 52       	subi	r18, 0x27	; 39
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	9c 81       	ldd	r25, Y+4	; 0x04
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	82 0f       	add	r24, r18
 23c:	93 1f       	adc	r25, r19
 23e:	29 85       	ldd	r18, Y+9	; 0x09
 240:	3a 85       	ldd	r19, Y+10	; 0x0a
 242:	fc 01       	movw	r30, r24
 244:	31 83       	std	Z+1, r19	; 0x01
 246:	20 83       	st	Z, r18
            stelle=stelle+1;
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	9c 81       	ldd	r25, Y+4	; 0x04
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	9c 83       	std	Y+4, r25	; 0x04
 250:	8b 83       	std	Y+3, r24	; 0x03
            {
                counter=counter+1;
            }
        }
        border=stelle+counter;
        while (stelle<border)
 252:	2b 81       	ldd	r18, Y+3	; 0x03
 254:	3c 81       	ldd	r19, Y+4	; 0x04
 256:	8d 85       	ldd	r24, Y+13	; 0x0d
 258:	9e 85       	ldd	r25, Y+14	; 0x0e
 25a:	28 17       	cp	r18, r24
 25c:	39 07       	cpc	r19, r25
 25e:	30 f3       	brcs	.-52     	; 0x22c <main+0x10c>
        {
            Ergebnis[stelle]=i;
            stelle=stelle+1;
        }
        counter=0;
 260:	1a 82       	std	Y+2, r1	; 0x02
 262:	19 82       	std	Y+1, r1	; 0x01
        if (testArray[i]>limit)
        {
            limit=testArray[i];
        }
    }
    for (uint16_t i=0; i<=limit; i=i+1)
 264:	89 85       	ldd	r24, Y+9	; 0x09
 266:	9a 85       	ldd	r25, Y+10	; 0x0a
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	9a 87       	std	Y+10, r25	; 0x0a
 26c:	89 87       	std	Y+9, r24	; 0x09
 26e:	29 85       	ldd	r18, Y+9	; 0x09
 270:	3a 85       	ldd	r19, Y+10	; 0x0a
 272:	8d 81       	ldd	r24, Y+5	; 0x05
 274:	9e 81       	ldd	r25, Y+6	; 0x06
 276:	82 17       	cp	r24, r18
 278:	93 07       	cpc	r25, r19
 27a:	08 f0       	brcs	.+2      	; 0x27e <main+0x15e>
 27c:	aa cf       	rjmp	.-172    	; 0x1d2 <main+0xb2>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
            Ergebnis[stelle]=i;
            stelle=stelle+1;
        }
        counter=0;
    }
}
 282:	c0 56       	subi	r28, 0x60	; 96
 284:	de 4f       	sbci	r29, 0xFE	; 254
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
