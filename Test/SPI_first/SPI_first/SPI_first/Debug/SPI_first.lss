
SPI_first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000446  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  000004ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ff7  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe3  00000000  00000000  00002693  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f84  00000000  00000000  00003676  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  000045fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c6  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012cb  00000000  00000000  0000529e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	63 c0       	rjmp	.+198    	; 0x124 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e4       	ldi	r30, 0x46	; 70
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 30       	cpi	r26, 0x02	; 2
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4a d0       	rcall	.+148    	; 0x1b4 <main>
 120:	90 c1       	rjmp	.+800    	; 0x442 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_23>:
	while(Text[i])
	{
		adm_USB_send_byte(Text[i]);
		i++;
	}
}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 136:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 13a:	89 2b       	or	r24, r25
 13c:	49 f0       	breq	.+18     	; 0x150 <__vector_23+0x2c>
 13e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 142:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 14c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <adm_ADC_init>:
//--------------------------------------------------------------------------------
// Initialisirung des ADC
//--------------------------------------------------------------------------------
void adm_ADC_init(void)
{
	ADMUX  = 0x40;	//AVCC Als referenz
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	DIDR0  = 0x0F;	// IO pins von Potentiometer deaktivieren
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
	// ADC einschalten, ADC clok = 16MHz / 128, Free runing mode
	ADCSRA = 0b10000111; 
 16a:	87 e8       	ldi	r24, 0x87	; 135
 16c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 170:	08 95       	ret

00000172 <adm_ADC_read>:
// Eine ADC lesung tätigen am ausgewälten ADC-Pin.
//--------------------------------------------------------------------------------
uint16_t adm_ADC_read(uint8_t kanal)
{
	// Kanal definieren
	ADMUX&=0xf0;
 172:	ec e7       	ldi	r30, 0x7C	; 124
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 81       	ld	r25, Z
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	90 83       	st	Z, r25
	ADMUX|=kanal&0x07;		//write ls3b to ADMUX
 17c:	90 81       	ld	r25, Z
 17e:	28 2f       	mov	r18, r24
 180:	27 70       	andi	r18, 0x07	; 7
 182:	92 2b       	or	r25, r18
 184:	90 83       	st	Z, r25
	ADCSRB&=~0x08;
 186:	eb e7       	ldi	r30, 0x7B	; 123
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	97 7f       	andi	r25, 0xF7	; 247
 18e:	90 83       	st	Z, r25
	ADCSRB|=kanal&0x08;		//write msb to ADCSRB
 190:	90 81       	ld	r25, Z
 192:	88 70       	andi	r24, 0x08	; 8
 194:	89 2b       	or	r24, r25
 196:	80 83       	st	Z, r24
	
	ADCSRA |= _BV(ADSC);	 	// ADC Starten
 198:	ea e7       	ldi	r30, 0x7A	; 122
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	80 83       	st	Z, r24
	while(ADCSRA & _BV(ADSC));// Warten bis Messung abgeschllossen
 1a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 1a6:	86 fd       	sbrc	r24, 6
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <adm_ADC_read+0x30>
	
	return ADC;
 1aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 1ae:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 1b2:	08 95       	ret

000001b4 <main>:
#define     FADESTEP 15
#define     COLORSTEP 7


int main(void)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	6e 97       	sbiw	r28, 0x1e	; 30
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
    uint16_t pos=1;
    uint8_t flagcount=1;
    uint8_t right[10]={0};
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	fe 01       	movw	r30, r28
 1cc:	31 96       	adiw	r30, 0x01	; 1
 1ce:	df 01       	movw	r26, r30
 1d0:	28 2f       	mov	r18, r24
 1d2:	1d 92       	st	X+, r1
 1d4:	2a 95       	dec	r18
 1d6:	e9 f7       	brne	.-6      	; 0x1d2 <main+0x1e>
    uint8_t bight[10]={0};
 1d8:	3a 96       	adiw	r30, 0x0a	; 10
 1da:	df 01       	movw	r26, r30
 1dc:	28 2f       	mov	r18, r24
 1de:	1d 92       	st	X+, r1
 1e0:	2a 95       	dec	r18
 1e2:	e9 f7       	brne	.-6      	; 0x1de <main+0x2a>
    uint8_t gight[10]={0};
 1e4:	3a 96       	adiw	r30, 0x0a	; 10
 1e6:	df 01       	movw	r26, r30
 1e8:	1d 92       	st	X+, r1
 1ea:	8a 95       	dec	r24
 1ec:	e9 f7       	brne	.-6      	; 0x1e8 <main+0x34>
    uint8_t vue=172;
    uint8_t veen=172;
    uint8_t times=0;
    uint8_t pot=0;

    SPI_Masterinit();
 1ee:	0d d1       	rcall	.+538    	; 0x40a <SPI_Masterinit>
    adm_ADC_init();
 1f0:	b6 df       	rcall	.-148    	; 0x15e <adm_ADC_init>
 1f2:	0f 2e       	mov	r0, r31
    uint8_t rink=0;
    uint8_t bink=1;
    uint8_t gink=0;
    uint8_t ved=15;
    uint8_t vue=172;
    uint8_t veen=172;
 1f4:	fc ea       	ldi	r31, 0xAC	; 172
 1f6:	3f 2e       	mov	r3, r31
 1f8:	f0 2d       	mov	r31, r0
 1fa:	0f 2e       	mov	r0, r31
    uint8_t gight[10]={0};
    uint8_t rink=0;
    uint8_t bink=1;
    uint8_t gink=0;
    uint8_t ved=15;
    uint8_t vue=172;
 1fc:	fc ea       	ldi	r31, 0xAC	; 172
 1fe:	4f 2e       	mov	r4, r31
 200:	f0 2d       	mov	r31, r0
 202:	0f 2e       	mov	r0, r31
    uint8_t bight[10]={0};
    uint8_t gight[10]={0};
    uint8_t rink=0;
    uint8_t bink=1;
    uint8_t gink=0;
    uint8_t ved=15;
 204:	ff e0       	ldi	r31, 0x0F	; 15
 206:	5f 2e       	mov	r5, r31
 208:	f0 2d       	mov	r31, r0
 20a:	61 2c       	mov	r6, r1
    uint8_t right[10]={0};
    uint8_t bight[10]={0};
    uint8_t gight[10]={0};
    uint8_t rink=0;
    uint8_t bink=1;
    uint8_t gink=0;
 20c:	77 24       	eor	r7, r7
    uint8_t flagcount=1;
    uint8_t right[10]={0};
    uint8_t bight[10]={0};
    uint8_t gight[10]={0};
    uint8_t rink=0;
    uint8_t bink=1;
 20e:	73 94       	inc	r7
 210:	81 2c       	mov	r8, r1
    uint16_t pos=1;
    uint8_t flagcount=1;
    uint8_t right[10]={0};
    uint8_t bight[10]={0};
    uint8_t gight[10]={0};
    uint8_t rink=0;
 212:	99 24       	eor	r9, r9


int main(void)
{
    uint16_t pos=1;
    uint8_t flagcount=1;
 214:	93 94       	inc	r9
 216:	cc 24       	eor	r12, r12
#define     COLORSTEP 7


int main(void)
{
    uint16_t pos=1;
 218:	c3 94       	inc	r12
 21a:	d1 2c       	mov	r13, r1

    SPI_Masterinit();
    adm_ADC_init();
    while (1)
    {
        pot= (uint32_t)adm_ADC_read(3)/100;
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	a9 df       	rcall	.-174    	; 0x172 <adm_ADC_read>
 220:	9c 01       	movw	r18, r24
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	36 95       	lsr	r19
 228:	27 95       	ror	r18
 22a:	ab e7       	ldi	r26, 0x7B	; 123
 22c:	b4 e1       	ldi	r27, 0x14	; 20
 22e:	fa d0       	rcall	.+500    	; 0x424 <__umulhisi3>
 230:	5c 01       	movw	r10, r24
 232:	b6 94       	lsr	r11
 234:	a7 94       	ror	r10
 236:	ea 2c       	mov	r14, r10
 238:	f1 2c       	mov	r15, r1
        for (uint8_t o=0; o<10;o++)
 23a:	1b c0       	rjmp	.+54     	; 0x272 <main+0xbe>
 23c:	0f 2d       	mov	r16, r15
        {
            SPI_mastertransmit(right[o]);
 23e:	10 e0       	ldi	r17, 0x00	; 0
 240:	e1 e0       	ldi	r30, 0x01	; 1
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ec 0f       	add	r30, r28
 246:	fd 1f       	adc	r31, r29
 248:	e0 0f       	add	r30, r16
 24a:	f1 1f       	adc	r31, r17
 24c:	80 81       	ld	r24, Z
 24e:	e5 d0       	rcall	.+458    	; 0x41a <SPI_mastertransmit>
 250:	eb e0       	ldi	r30, 0x0B	; 11
            SPI_mastertransmit(bight[o]);
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	ec 0f       	add	r30, r28
 256:	fd 1f       	adc	r31, r29
 258:	e0 0f       	add	r30, r16
 25a:	f1 1f       	adc	r31, r17
 25c:	80 81       	ld	r24, Z
 25e:	dd d0       	rcall	.+442    	; 0x41a <SPI_mastertransmit>
 260:	e5 e1       	ldi	r30, 0x15	; 21
            SPI_mastertransmit(gight[o]);
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ec 0f       	add	r30, r28
 266:	fd 1f       	adc	r31, r29
 268:	e0 0f       	add	r30, r16
 26a:	f1 1f       	adc	r31, r17
 26c:	80 81       	ld	r24, Z
 26e:	d5 d0       	rcall	.+426    	; 0x41a <SPI_mastertransmit>
 270:	f3 94       	inc	r15
    SPI_Masterinit();
    adm_ADC_init();
    while (1)
    {
        pot= (uint32_t)adm_ADC_read(3)/100;
        for (uint8_t o=0; o<10;o++)
 272:	b9 e0       	ldi	r27, 0x09	; 9
 274:	bf 15       	cp	r27, r15
 276:	10 f7       	brcc	.-60     	; 0x23c <main+0x88>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	26 c0       	rjmp	.+76     	; 0x2c8 <main+0x114>
 27c:	8e 11       	cpse	r24, r14
            SPI_mastertransmit(bight[o]);
            SPI_mastertransmit(gight[o]);
        }
         for (uint8_t i=0; i<10; i++)
        {
            if(pot==i)
 27e:	08 c0       	rjmp	.+16     	; 0x290 <main+0xdc>
 280:	e1 e0       	ldi	r30, 0x01	; 1
            {
                right[pot]=ved;
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ec 0f       	add	r30, r28
 286:	fd 1f       	adc	r31, r29
 288:	ea 0d       	add	r30, r10
 28a:	f1 1d       	adc	r31, r1
 28c:	50 82       	st	Z, r5
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <main+0x112>
 290:	28 2f       	mov	r18, r24
            }
            else
            {
                if (right[i]<FADESTEP)
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	e1 e0       	ldi	r30, 0x01	; 1
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ec 0f       	add	r30, r28
 29a:	fd 1f       	adc	r31, r29
 29c:	e2 0f       	add	r30, r18
 29e:	f3 1f       	adc	r31, r19
 2a0:	90 81       	ld	r25, Z
 2a2:	9f 30       	cpi	r25, 0x0F	; 15
 2a4:	40 f4       	brcc	.+16     	; 0x2b6 <main+0x102>
 2a6:	e1 e0       	ldi	r30, 0x01	; 1
                {
                    right[i]=0;
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ec 0f       	add	r30, r28
 2ac:	fd 1f       	adc	r31, r29
 2ae:	e2 0f       	add	r30, r18
 2b0:	f3 1f       	adc	r31, r19
 2b2:	10 82       	st	Z, r1
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <main+0x112>
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
                }
                else
                {
                    right[i]=right[i]-FADESTEP;
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ec 0f       	add	r30, r28
 2bc:	fd 1f       	adc	r31, r29
 2be:	e2 0f       	add	r30, r18
 2c0:	f3 1f       	adc	r31, r19
 2c2:	9f 50       	subi	r25, 0x0F	; 15
 2c4:	90 83       	st	Z, r25
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
        {
            SPI_mastertransmit(right[o]);
            SPI_mastertransmit(bight[o]);
            SPI_mastertransmit(gight[o]);
        }
         for (uint8_t i=0; i<10; i++)
 2c8:	8a 30       	cpi	r24, 0x0A	; 10
 2ca:	c0 f2       	brcs	.-80     	; 0x27c <main+0xc8>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	26 c0       	rjmp	.+76     	; 0x31c <main+0x168>
 2d0:	8e 11       	cpse	r24, r14
            }
        }
        
        for (uint8_t i=0; i<10; i++)
        {
            if(pot==i)
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <main+0x130>
 2d4:	eb e0       	ldi	r30, 0x0B	; 11
            {
                bight[pot]=vue;
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ec 0f       	add	r30, r28
 2da:	fd 1f       	adc	r31, r29
 2dc:	ea 0d       	add	r30, r10
 2de:	f1 1d       	adc	r31, r1
 2e0:	40 82       	st	Z, r4
 2e2:	1b c0       	rjmp	.+54     	; 0x31a <main+0x166>
 2e4:	28 2f       	mov	r18, r24
            }
            else
            {
                if (bight[i]<FADESTEP)
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	eb e0       	ldi	r30, 0x0B	; 11
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ec 0f       	add	r30, r28
 2ee:	fd 1f       	adc	r31, r29
 2f0:	e2 0f       	add	r30, r18
 2f2:	f3 1f       	adc	r31, r19
 2f4:	90 81       	ld	r25, Z
 2f6:	9f 30       	cpi	r25, 0x0F	; 15
 2f8:	40 f4       	brcc	.+16     	; 0x30a <main+0x156>
 2fa:	eb e0       	ldi	r30, 0x0B	; 11
                {
                    bight[i]=0;
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	ec 0f       	add	r30, r28
 300:	fd 1f       	adc	r31, r29
 302:	e2 0f       	add	r30, r18
 304:	f3 1f       	adc	r31, r19
 306:	10 82       	st	Z, r1
 308:	08 c0       	rjmp	.+16     	; 0x31a <main+0x166>
 30a:	eb e0       	ldi	r30, 0x0B	; 11
                }
                else
                {
                    bight[i]=bight[i]-FADESTEP;
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	ec 0f       	add	r30, r28
 310:	fd 1f       	adc	r31, r29
 312:	e2 0f       	add	r30, r18
 314:	f3 1f       	adc	r31, r19
 316:	9f 50       	subi	r25, 0x0F	; 15
 318:	90 83       	st	Z, r25
 31a:	8f 5f       	subi	r24, 0xFF	; 255
                    right[i]=right[i]-FADESTEP;
                }
            }
        }
        
        for (uint8_t i=0; i<10; i++)
 31c:	8a 30       	cpi	r24, 0x0A	; 10
 31e:	c0 f2       	brcs	.-80     	; 0x2d0 <main+0x11c>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	26 c0       	rjmp	.+76     	; 0x370 <main+0x1bc>
 324:	8e 11       	cpse	r24, r14
            }
        }
        
        for (uint8_t i=0; i<10; i++)
        {
            if(pot==i)
 326:	08 c0       	rjmp	.+16     	; 0x338 <main+0x184>
 328:	e5 e1       	ldi	r30, 0x15	; 21
            {
                gight[pot]=veen;
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ec 0f       	add	r30, r28
 32e:	fd 1f       	adc	r31, r29
 330:	ea 0d       	add	r30, r10
 332:	f1 1d       	adc	r31, r1
 334:	30 82       	st	Z, r3
 336:	1b c0       	rjmp	.+54     	; 0x36e <main+0x1ba>
 338:	28 2f       	mov	r18, r24
            }
            else
            {
                if (gight[i]<FADESTEP)
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	e5 e1       	ldi	r30, 0x15	; 21
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ec 0f       	add	r30, r28
 342:	fd 1f       	adc	r31, r29
 344:	e2 0f       	add	r30, r18
 346:	f3 1f       	adc	r31, r19
 348:	90 81       	ld	r25, Z
 34a:	9f 30       	cpi	r25, 0x0F	; 15
 34c:	40 f4       	brcc	.+16     	; 0x35e <main+0x1aa>
 34e:	e5 e1       	ldi	r30, 0x15	; 21
                {
                    gight[i]=0;
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	ec 0f       	add	r30, r28
 354:	fd 1f       	adc	r31, r29
 356:	e2 0f       	add	r30, r18
 358:	f3 1f       	adc	r31, r19
 35a:	10 82       	st	Z, r1
 35c:	08 c0       	rjmp	.+16     	; 0x36e <main+0x1ba>
 35e:	e5 e1       	ldi	r30, 0x15	; 21
                }
                else
                {
                    gight[i]=gight[i]-FADESTEP;
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	ec 0f       	add	r30, r28
 364:	fd 1f       	adc	r31, r29
 366:	e2 0f       	add	r30, r18
 368:	f3 1f       	adc	r31, r19
 36a:	9f 50       	subi	r25, 0x0F	; 15
 36c:	90 83       	st	Z, r25
 36e:	8f 5f       	subi	r24, 0xFF	; 255
                    bight[i]=bight[i]-FADESTEP;
                }
            }
        }
        
        for (uint8_t i=0; i<10; i++)
 370:	8a 30       	cpi	r24, 0x0A	; 10
 372:	c0 f2       	brcs	.-80     	; 0x324 <main+0x170>
 374:	c1 14       	cp	r12, r1
                    gight[i]=gight[i]-FADESTEP;
                }
            }
        }        
        
        if ((!pos)||(pos==9))
 376:	d1 04       	cpc	r13, r1
 378:	21 f0       	breq	.+8      	; 0x382 <main+0x1ce>
 37a:	29 e0       	ldi	r18, 0x09	; 9
 37c:	c2 16       	cp	r12, r18
 37e:	d1 04       	cpc	r13, r1
 380:	21 f4       	brne	.+8      	; 0x38a <main+0x1d6>
 382:	81 e0       	ldi	r24, 0x01	; 1
        {
            flagcount=!flagcount;
 384:	91 10       	cpse	r9, r1
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	98 2e       	mov	r9, r24
 38a:	99 20       	and	r9, r9
        }
        
        if (flagcount)
 38c:	21 f0       	breq	.+8      	; 0x396 <main+0x1e2>
 38e:	8f ef       	ldi	r24, 0xFF	; 255
        {
            pos=pos+1;
 390:	c8 1a       	sub	r12, r24
 392:	d8 0a       	sbc	r13, r24
 394:	03 c0       	rjmp	.+6      	; 0x39c <main+0x1e8>
 396:	91 e0       	ldi	r25, 0x01	; 1
        }
        else
        {
            pos=pos-1;
 398:	c9 1a       	sub	r12, r25
 39a:	d1 08       	sbc	r13, r1
 39c:	82 ee       	ldi	r24, 0xE2	; 226
        }
        
        if ((ved<30)||(ved>225))
 39e:	85 0d       	add	r24, r5
 3a0:	84 3c       	cpi	r24, 0xC4	; 196
 3a2:	20 f0       	brcs	.+8      	; 0x3ac <main+0x1f8>
 3a4:	81 e0       	ldi	r24, 0x01	; 1
        {
            rink=!rink;
 3a6:	81 10       	cpse	r8, r1
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	88 2e       	mov	r8, r24
 3ac:	82 ee       	ldi	r24, 0xE2	; 226
        }
        if ((vue<30)||(vue>225))
 3ae:	84 0d       	add	r24, r4
 3b0:	84 3c       	cpi	r24, 0xC4	; 196
 3b2:	20 f0       	brcs	.+8      	; 0x3bc <main+0x208>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
        {
            bink=!bink;
 3b6:	71 10       	cpse	r7, r1
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	78 2e       	mov	r7, r24
 3bc:	82 ee       	ldi	r24, 0xE2	; 226
        }
        if ((veen<30)||(veen>225))
 3be:	83 0d       	add	r24, r3
 3c0:	84 3c       	cpi	r24, 0xC4	; 196
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <main+0x218>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
        {
            gink=!gink;
 3c6:	61 10       	cpse	r6, r1
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	68 2e       	mov	r6, r24
 3cc:	88 20       	and	r8, r8
        }
        
        if (rink)
 3ce:	19 f0       	breq	.+6      	; 0x3d6 <main+0x222>
 3d0:	a7 e0       	ldi	r26, 0x07	; 7
        {
            ved=ved+COLORSTEP;
 3d2:	5a 0e       	add	r5, r26
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <main+0x226>
 3d6:	b9 ef       	ldi	r27, 0xF9	; 249
        } 
        else
        {
            ved=ved-COLORSTEP;
 3d8:	5b 0e       	add	r5, r27
 3da:	77 20       	and	r7, r7
        }
        
        if (bink)
 3dc:	19 f0       	breq	.+6      	; 0x3e4 <main+0x230>
 3de:	27 e0       	ldi	r18, 0x07	; 7
        {
            vue=vue+COLORSTEP;
 3e0:	42 0e       	add	r4, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <main+0x234>
 3e4:	89 ef       	ldi	r24, 0xF9	; 249
        }
        else
        {
            vue=vue-COLORSTEP;
 3e6:	48 0e       	add	r4, r24
 3e8:	66 20       	and	r6, r6
        }
        
        if (gink)
 3ea:	19 f0       	breq	.+6      	; 0x3f2 <main+0x23e>
 3ec:	97 e0       	ldi	r25, 0x07	; 7
        {
            veen=veen+COLORSTEP;
 3ee:	39 0e       	add	r3, r25
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <main+0x242>
 3f2:	a9 ef       	ldi	r26, 0xF9	; 249
        }
        else
        {
            veen=veen-COLORSTEP;
 3f4:	3a 0e       	add	r3, r26
 3f6:	bf ef       	ldi	r27, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	2d ee       	ldi	r18, 0xED	; 237
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	b1 50       	subi	r27, 0x01	; 1
 3fe:	20 40       	sbci	r18, 0x00	; 0
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x248>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	09 cf       	rjmp	.-494    	; 0x21c <main+0x68>

0000040a <SPI_Masterinit>:
#define DDR_SPI DDRB

void SPI_Masterinit (void)
{
    //MOSI&clk out, rest in
    DDR_SPI |= (1<<CLK)|(1<<MOSI)|(1<<SS);
 40a:	84 b1       	in	r24, 0x04	; 4
 40c:	87 60       	ori	r24, 0x07	; 7
 40e:	84 b9       	out	0x04, r24	; 4
    //set SPE, MSTR, clk/32 (SPR1, SPI2X)
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
 410:	82 e5       	ldi	r24, 0x52	; 82
 412:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1<<SPI2X) ;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	8d bd       	out	0x2d, r24	; 45
 418:	08 95       	ret

0000041a <SPI_mastertransmit>:
}
void SPI_mastertransmit(uint8_t cData)
{
    //Sample
    SPDR = cData;
 41a:	8e bd       	out	0x2e, r24	; 46
    //wait til complete
    while (!(SPSR&(1<<SPIF)))
 41c:	0d b4       	in	r0, 0x2d	; 45
 41e:	07 fe       	sbrs	r0, 7
 420:	fd cf       	rjmp	.-6      	; 0x41c <SPI_mastertransmit+0x2>
    {
    }
 422:	08 95       	ret

00000424 <__umulhisi3>:
 424:	a2 9f       	mul	r26, r18
 426:	b0 01       	movw	r22, r0
 428:	b3 9f       	mul	r27, r19
 42a:	c0 01       	movw	r24, r0
 42c:	a3 9f       	mul	r26, r19
 42e:	70 0d       	add	r23, r0
 430:	81 1d       	adc	r24, r1
 432:	11 24       	eor	r1, r1
 434:	91 1d       	adc	r25, r1
 436:	b2 9f       	mul	r27, r18
 438:	70 0d       	add	r23, r0
 43a:	81 1d       	adc	r24, r1
 43c:	11 24       	eor	r1, r1
 43e:	91 1d       	adc	r25, r1
 440:	08 95       	ret

00000442 <_exit>:
 442:	f8 94       	cli

00000444 <__stop_program>:
 444:	ff cf       	rjmp	.-2      	; 0x444 <__stop_program>
