
SPI_first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fc0  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd4  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7e  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c0  00000000  00000000  00004920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ee  00000000  00000000  000051e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000064ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	63 c0       	rjmp	.+198    	; 0x124 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 30       	cpi	r26, 0x02	; 2
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	29 d0       	rcall	.+82     	; 0x172 <main>
 120:	5b c1       	rjmp	.+694    	; 0x3d8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_23>:
	while(Text[i])
	{
		adm_USB_send_byte(Text[i]);
		i++;
	}
}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 136:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 13a:	89 2b       	or	r24, r25
 13c:	49 f0       	breq	.+18     	; 0x150 <__vector_23+0x2c>
 13e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 142:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 14c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <adm_ADC_init>:
//--------------------------------------------------------------------------------
// Initialisirung des ADC
//--------------------------------------------------------------------------------
void adm_ADC_init(void)
{
	ADMUX  = 0x40;	//AVCC Als referenz
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	DIDR0  = 0x0F;	// IO pins von Potentiometer deaktivieren
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
	// ADC einschalten, ADC clok = 16MHz / 128, Free runing mode
	ADCSRA = 0b10000111; 
 16a:	87 e8       	ldi	r24, 0x87	; 135
 16c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 170:	08 95       	ret

00000172 <main>:
#define     FADESTEP 15
#define     COLORSTEP 15


int main(void)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	6e 97       	sbiw	r28, 0x1e	; 30
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
    uint16_t pos=1;
    uint8_t flagcount=1;
    uint8_t right[10]={0};
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	fe 01       	movw	r30, r28
 18a:	31 96       	adiw	r30, 0x01	; 1
 18c:	df 01       	movw	r26, r30
 18e:	28 2f       	mov	r18, r24
 190:	1d 92       	st	X+, r1
 192:	2a 95       	dec	r18
 194:	e9 f7       	brne	.-6      	; 0x190 <main+0x1e>
    uint8_t bight[10]={0};
 196:	3a 96       	adiw	r30, 0x0a	; 10
 198:	df 01       	movw	r26, r30
 19a:	28 2f       	mov	r18, r24
 19c:	1d 92       	st	X+, r1
 19e:	2a 95       	dec	r18
 1a0:	e9 f7       	brne	.-6      	; 0x19c <main+0x2a>
    uint8_t gight[10]={0};
 1a2:	3a 96       	adiw	r30, 0x0a	; 10
 1a4:	df 01       	movw	r26, r30
 1a6:	1d 92       	st	X+, r1
 1a8:	8a 95       	dec	r24
 1aa:	e9 f7       	brne	.-6      	; 0x1a6 <main+0x34>
    uint8_t ved=FADESTEP;
    uint8_t vue=172;
    uint8_t veen=172;
    

    SPI_Masterinit();
 1ac:	08 d1       	rcall	.+528    	; 0x3be <SPI_Masterinit>
    adm_ADC_init();
 1ae:	d7 df       	rcall	.-82     	; 0x15e <adm_ADC_init>
 1b0:	0f 2e       	mov	r0, r31
    uint8_t rink=0;
    uint8_t bink=1;
    uint8_t gink=0;
    uint8_t ved=FADESTEP;
    uint8_t vue=172;
    uint8_t veen=172;
 1b2:	fc ea       	ldi	r31, 0xAC	; 172
 1b4:	6f 2e       	mov	r6, r31
 1b6:	f0 2d       	mov	r31, r0
 1b8:	0f 2e       	mov	r0, r31
    uint8_t gight[10]={0};
    uint8_t rink=0;
    uint8_t bink=1;
    uint8_t gink=0;
    uint8_t ved=FADESTEP;
    uint8_t vue=172;
 1ba:	fc ea       	ldi	r31, 0xAC	; 172
 1bc:	7f 2e       	mov	r7, r31
 1be:	f0 2d       	mov	r31, r0
 1c0:	0f 2e       	mov	r0, r31
    uint8_t bight[10]={0};
    uint8_t gight[10]={0};
    uint8_t rink=0;
    uint8_t bink=1;
    uint8_t gink=0;
    uint8_t ved=FADESTEP;
 1c2:	ff e0       	ldi	r31, 0x0F	; 15
 1c4:	8f 2e       	mov	r8, r31
 1c6:	f0 2d       	mov	r31, r0
 1c8:	a1 2c       	mov	r10, r1
    uint8_t right[10]={0};
    uint8_t bight[10]={0};
    uint8_t gight[10]={0};
    uint8_t rink=0;
    uint8_t bink=1;
    uint8_t gink=0;
 1ca:	bb 24       	eor	r11, r11
    uint8_t flagcount=1;
    uint8_t right[10]={0};
    uint8_t bight[10]={0};
    uint8_t gight[10]={0};
    uint8_t rink=0;
    uint8_t bink=1;
 1cc:	b3 94       	inc	r11
 1ce:	c1 2c       	mov	r12, r1
    uint16_t pos=1;
    uint8_t flagcount=1;
    uint8_t right[10]={0};
    uint8_t bight[10]={0};
    uint8_t gight[10]={0};
    uint8_t rink=0;
 1d0:	dd 24       	eor	r13, r13


int main(void)
{
    uint16_t pos=1;
    uint8_t flagcount=1;
 1d2:	d3 94       	inc	r13
 1d4:	ee 24       	eor	r14, r14
#define     COLORSTEP 15


int main(void)
{
    uint16_t pos=1;
 1d6:	e3 94       	inc	r14
 1d8:	f1 2c       	mov	r15, r1
 1da:	91 2c       	mov	r9, r1
    SPI_Masterinit();
    adm_ADC_init();
    while (1)
    {

        for (uint8_t i=0;i<10;i++)
 1dc:	1b c0       	rjmp	.+54     	; 0x214 <main+0xa2>
 1de:	09 2d       	mov	r16, r9
        {
            SPI_mastertransmit(right[i]);
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	e1 e0       	ldi	r30, 0x01	; 1
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	e0 0f       	add	r30, r16
 1ec:	f1 1f       	adc	r31, r17
 1ee:	80 81       	ld	r24, Z
 1f0:	ee d0       	rcall	.+476    	; 0x3ce <SPI_mastertransmit>
 1f2:	eb e0       	ldi	r30, 0x0B	; 11
            SPI_mastertransmit(bight[i]);
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	e0 0f       	add	r30, r16
 1fc:	f1 1f       	adc	r31, r17
 1fe:	80 81       	ld	r24, Z
 200:	e6 d0       	rcall	.+460    	; 0x3ce <SPI_mastertransmit>
 202:	e5 e1       	ldi	r30, 0x15	; 21
            SPI_mastertransmit(gight[i]);
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ec 0f       	add	r30, r28
 208:	fd 1f       	adc	r31, r29
 20a:	e0 0f       	add	r30, r16
 20c:	f1 1f       	adc	r31, r17
 20e:	80 81       	ld	r24, Z
 210:	de d0       	rcall	.+444    	; 0x3ce <SPI_mastertransmit>
 212:	93 94       	inc	r9
    SPI_Masterinit();
    adm_ADC_init();
    while (1)
    {

        for (uint8_t i=0;i<10;i++)
 214:	b9 e0       	ldi	r27, 0x09	; 9
 216:	b9 15       	cp	r27, r9
 218:	10 f7       	brcc	.-60     	; 0x1de <main+0x6c>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	29 c0       	rjmp	.+82     	; 0x270 <main+0xfe>
 21e:	28 2f       	mov	r18, r24
            SPI_mastertransmit(bight[i]);
            SPI_mastertransmit(gight[i]);
        }
        for (uint8_t i=0; i<10; i++)
        {
            if(pos==i)
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	e2 16       	cp	r14, r18
 224:	f3 06       	cpc	r15, r19
 226:	41 f4       	brne	.+16     	; 0x238 <main+0xc6>
 228:	e1 e0       	ldi	r30, 0x01	; 1
            {
                right[pos]=ved;
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ec 0f       	add	r30, r28
 22e:	fd 1f       	adc	r31, r29
 230:	ee 0d       	add	r30, r14
 232:	ff 1d       	adc	r31, r15
 234:	80 82       	st	Z, r8
 236:	1b c0       	rjmp	.+54     	; 0x26e <main+0xfc>
 238:	28 2f       	mov	r18, r24
            }
            else
            {
                if (right[i]<FADESTEP)
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	e1 e0       	ldi	r30, 0x01	; 1
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ec 0f       	add	r30, r28
 242:	fd 1f       	adc	r31, r29
 244:	e2 0f       	add	r30, r18
 246:	f3 1f       	adc	r31, r19
 248:	90 81       	ld	r25, Z
 24a:	9f 30       	cpi	r25, 0x0F	; 15
 24c:	40 f4       	brcc	.+16     	; 0x25e <main+0xec>
 24e:	e1 e0       	ldi	r30, 0x01	; 1
                {
                    right[i]=0;
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 0f       	add	r30, r28
 254:	fd 1f       	adc	r31, r29
 256:	e2 0f       	add	r30, r18
 258:	f3 1f       	adc	r31, r19
 25a:	10 82       	st	Z, r1
 25c:	08 c0       	rjmp	.+16     	; 0x26e <main+0xfc>
 25e:	e1 e0       	ldi	r30, 0x01	; 1
                }
                else
                {
                    right[i]=right[i]-FADESTEP;
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e2 0f       	add	r30, r18
 268:	f3 1f       	adc	r31, r19
 26a:	9f 50       	subi	r25, 0x0F	; 15
 26c:	90 83       	st	Z, r25
 26e:	8f 5f       	subi	r24, 0xFF	; 255
        {
            SPI_mastertransmit(right[i]);
            SPI_mastertransmit(bight[i]);
            SPI_mastertransmit(gight[i]);
        }
        for (uint8_t i=0; i<10; i++)
 270:	8a 30       	cpi	r24, 0x0A	; 10
 272:	a8 f2       	brcs	.-86     	; 0x21e <main+0xac>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	29 c0       	rjmp	.+82     	; 0x2ca <main+0x158>
 278:	28 2f       	mov	r18, r24
            }
        }
        
        for (uint8_t i=0; i<10; i++)
        {
            if(pos==i)
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	e2 16       	cp	r14, r18
 27e:	f3 06       	cpc	r15, r19
 280:	41 f4       	brne	.+16     	; 0x292 <main+0x120>
 282:	eb e0       	ldi	r30, 0x0B	; 11
            {
                bight[pos]=vue;
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	ec 0f       	add	r30, r28
 288:	fd 1f       	adc	r31, r29
 28a:	ee 0d       	add	r30, r14
 28c:	ff 1d       	adc	r31, r15
 28e:	70 82       	st	Z, r7
 290:	1b c0       	rjmp	.+54     	; 0x2c8 <main+0x156>
 292:	28 2f       	mov	r18, r24
            }
            else
            {
                if (bight[i]<FADESTEP)
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	eb e0       	ldi	r30, 0x0B	; 11
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ec 0f       	add	r30, r28
 29c:	fd 1f       	adc	r31, r29
 29e:	e2 0f       	add	r30, r18
 2a0:	f3 1f       	adc	r31, r19
 2a2:	90 81       	ld	r25, Z
 2a4:	9f 30       	cpi	r25, 0x0F	; 15
 2a6:	40 f4       	brcc	.+16     	; 0x2b8 <main+0x146>
 2a8:	eb e0       	ldi	r30, 0x0B	; 11
                {
                    bight[i]=0;
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ec 0f       	add	r30, r28
 2ae:	fd 1f       	adc	r31, r29
 2b0:	e2 0f       	add	r30, r18
 2b2:	f3 1f       	adc	r31, r19
 2b4:	10 82       	st	Z, r1
 2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <main+0x156>
 2b8:	eb e0       	ldi	r30, 0x0B	; 11
                }
                else
                {
                    bight[i]=bight[i]-FADESTEP;
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ec 0f       	add	r30, r28
 2be:	fd 1f       	adc	r31, r29
 2c0:	e2 0f       	add	r30, r18
 2c2:	f3 1f       	adc	r31, r19
 2c4:	9f 50       	subi	r25, 0x0F	; 15
 2c6:	90 83       	st	Z, r25
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
                    right[i]=right[i]-FADESTEP;
                }
            }
        }
        
        for (uint8_t i=0; i<10; i++)
 2ca:	8a 30       	cpi	r24, 0x0A	; 10
 2cc:	a8 f2       	brcs	.-86     	; 0x278 <main+0x106>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	29 c0       	rjmp	.+82     	; 0x324 <main+0x1b2>
 2d2:	28 2f       	mov	r18, r24
            }
        }
        
        for (uint8_t i=0; i<10; i++)
        {
            if(pos==i)
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	e2 16       	cp	r14, r18
 2d8:	f3 06       	cpc	r15, r19
 2da:	41 f4       	brne	.+16     	; 0x2ec <main+0x17a>
 2dc:	e5 e1       	ldi	r30, 0x15	; 21
            {
                gight[pos]=veen;
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ec 0f       	add	r30, r28
 2e2:	fd 1f       	adc	r31, r29
 2e4:	ee 0d       	add	r30, r14
 2e6:	ff 1d       	adc	r31, r15
 2e8:	60 82       	st	Z, r6
 2ea:	1b c0       	rjmp	.+54     	; 0x322 <main+0x1b0>
 2ec:	28 2f       	mov	r18, r24
            }
            else
            {
                if (gight[i]<FADESTEP)
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	e5 e1       	ldi	r30, 0x15	; 21
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ec 0f       	add	r30, r28
 2f6:	fd 1f       	adc	r31, r29
 2f8:	e2 0f       	add	r30, r18
 2fa:	f3 1f       	adc	r31, r19
 2fc:	90 81       	ld	r25, Z
 2fe:	9f 30       	cpi	r25, 0x0F	; 15
 300:	40 f4       	brcc	.+16     	; 0x312 <main+0x1a0>
 302:	e5 e1       	ldi	r30, 0x15	; 21
                {
                    gight[i]=0;
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ec 0f       	add	r30, r28
 308:	fd 1f       	adc	r31, r29
 30a:	e2 0f       	add	r30, r18
 30c:	f3 1f       	adc	r31, r19
 30e:	10 82       	st	Z, r1
 310:	08 c0       	rjmp	.+16     	; 0x322 <main+0x1b0>
 312:	e5 e1       	ldi	r30, 0x15	; 21
                }
                else
                {
                    gight[i]=gight[i]-FADESTEP;
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	ec 0f       	add	r30, r28
 318:	fd 1f       	adc	r31, r29
 31a:	e2 0f       	add	r30, r18
 31c:	f3 1f       	adc	r31, r19
 31e:	9f 50       	subi	r25, 0x0F	; 15
 320:	90 83       	st	Z, r25
 322:	8f 5f       	subi	r24, 0xFF	; 255
                    bight[i]=bight[i]-FADESTEP;
                }
            }
        }
        
        for (uint8_t i=0; i<10; i++)
 324:	8a 30       	cpi	r24, 0x0A	; 10
 326:	a8 f2       	brcs	.-86     	; 0x2d2 <main+0x160>
 328:	e1 14       	cp	r14, r1
                    gight[i]=gight[i]-FADESTEP;
                }
            }
        }        
        
        if ((!pos)||(pos==9))
 32a:	f1 04       	cpc	r15, r1
 32c:	21 f0       	breq	.+8      	; 0x336 <main+0x1c4>
 32e:	29 e0       	ldi	r18, 0x09	; 9
 330:	e2 16       	cp	r14, r18
 332:	f1 04       	cpc	r15, r1
 334:	21 f4       	brne	.+8      	; 0x33e <main+0x1cc>
 336:	81 e0       	ldi	r24, 0x01	; 1
        {
            flagcount=!flagcount;
 338:	d1 10       	cpse	r13, r1
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	d8 2e       	mov	r13, r24
 33e:	dd 20       	and	r13, r13
        }
        
        if (flagcount)
 340:	21 f0       	breq	.+8      	; 0x34a <main+0x1d8>
 342:	8f ef       	ldi	r24, 0xFF	; 255
        {
            pos=pos+1;
 344:	e8 1a       	sub	r14, r24
 346:	f8 0a       	sbc	r15, r24
 348:	03 c0       	rjmp	.+6      	; 0x350 <main+0x1de>
 34a:	91 e0       	ldi	r25, 0x01	; 1
        }
        else
        {
            pos=pos-1;
 34c:	e9 1a       	sub	r14, r25
 34e:	f1 08       	sbc	r15, r1
 350:	82 ee       	ldi	r24, 0xE2	; 226
        }
        
        if ((ved<30)||(ved>225))
 352:	88 0d       	add	r24, r8
 354:	84 3c       	cpi	r24, 0xC4	; 196
 356:	20 f0       	brcs	.+8      	; 0x360 <main+0x1ee>
 358:	81 e0       	ldi	r24, 0x01	; 1
        {
            rink=!rink;
 35a:	c1 10       	cpse	r12, r1
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	c8 2e       	mov	r12, r24
 360:	82 ee       	ldi	r24, 0xE2	; 226
        }
        if ((vue<30)||(vue>225))
 362:	87 0d       	add	r24, r7
 364:	84 3c       	cpi	r24, 0xC4	; 196
 366:	20 f0       	brcs	.+8      	; 0x370 <main+0x1fe>
 368:	81 e0       	ldi	r24, 0x01	; 1
        {
            bink=!bink;
 36a:	b1 10       	cpse	r11, r1
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	b8 2e       	mov	r11, r24
 370:	82 ee       	ldi	r24, 0xE2	; 226
        }
        if ((veen<30)||(veen>225))
 372:	86 0d       	add	r24, r6
 374:	84 3c       	cpi	r24, 0xC4	; 196
 376:	20 f0       	brcs	.+8      	; 0x380 <main+0x20e>
 378:	81 e0       	ldi	r24, 0x01	; 1
        {
            gink=!gink;
 37a:	a1 10       	cpse	r10, r1
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	a8 2e       	mov	r10, r24
 380:	cc 20       	and	r12, r12
        }
        
        if (rink)
 382:	19 f0       	breq	.+6      	; 0x38a <main+0x218>
 384:	af e0       	ldi	r26, 0x0F	; 15
        {
            ved=ved+COLORSTEP;
 386:	8a 0e       	add	r8, r26
 388:	02 c0       	rjmp	.+4      	; 0x38e <main+0x21c>
 38a:	b1 ef       	ldi	r27, 0xF1	; 241
        } 
        else
        {
            ved=ved-COLORSTEP;
 38c:	8b 0e       	add	r8, r27
 38e:	bb 20       	and	r11, r11
        }
        
        if (bink)
 390:	19 f0       	breq	.+6      	; 0x398 <main+0x226>
 392:	2f e0       	ldi	r18, 0x0F	; 15
        {
            vue=vue+COLORSTEP;
 394:	72 0e       	add	r7, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <main+0x22a>
 398:	81 ef       	ldi	r24, 0xF1	; 241
        }
        else
        {
            vue=vue-COLORSTEP;
 39a:	78 0e       	add	r7, r24
 39c:	aa 20       	and	r10, r10
        }
        
        if (gink)
 39e:	19 f0       	breq	.+6      	; 0x3a6 <main+0x234>
 3a0:	9f e0       	ldi	r25, 0x0F	; 15
        {
            veen=veen+COLORSTEP;
 3a2:	69 0e       	add	r6, r25
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <main+0x238>
 3a6:	a1 ef       	ldi	r26, 0xF1	; 241
        }
        else
        {
            veen=veen-COLORSTEP;
 3a8:	6a 0e       	add	r6, r26
 3aa:	bf ef       	ldi	r27, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	21 ee       	ldi	r18, 0xE1	; 225
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	b1 50       	subi	r27, 0x01	; 1
 3b2:	20 40       	sbci	r18, 0x00	; 0
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <main+0x23e>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x248>
 3ba:	00 00       	nop
 3bc:	0e cf       	rjmp	.-484    	; 0x1da <main+0x68>

000003be <SPI_Masterinit>:
#define DDR_SPI DDRB

void SPI_Masterinit (void)
{
    //MOSI&clk out, rest in
    DDR_SPI |= (1<<CLK)|(1<<MOSI)|(1<<SS);
 3be:	84 b1       	in	r24, 0x04	; 4
 3c0:	87 60       	ori	r24, 0x07	; 7
 3c2:	84 b9       	out	0x04, r24	; 4
    //set SPE, MSTR, clk/32 (SPR1, SPI2X)
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
 3c4:	82 e5       	ldi	r24, 0x52	; 82
 3c6:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1<<SPI2X) ;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	8d bd       	out	0x2d, r24	; 45
 3cc:	08 95       	ret

000003ce <SPI_mastertransmit>:
}
void SPI_mastertransmit(uint8_t cData)
{
    //Sample
    SPDR = cData;
 3ce:	8e bd       	out	0x2e, r24	; 46
    //wait til complete
    while (!(SPSR&(1<<SPIF)))
 3d0:	0d b4       	in	r0, 0x2d	; 45
 3d2:	07 fe       	sbrs	r0, 7
 3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <SPI_mastertransmit+0x2>
    {
    }
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
