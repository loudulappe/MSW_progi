
Delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001084  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d9c  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000665  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000687  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040f  00000000  00000000  00003013  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003422  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	15 d0       	rcall	.+42     	; 0x120 <main>
  f6:	01 c1       	rjmp	.+514    	; 0x2fa <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <initBoard>:
}

uint8_t SwitchReadAll()
{
    return PINC;
}
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 b9       	out	0x01, r24	; 1
  fe:	84 b9       	out	0x04, r24	; 4
 100:	17 b8       	out	0x07, r1	; 7
 102:	88 b9       	out	0x08, r24	; 8
 104:	08 95       	ret

00000106 <ledWriteAll>:
 106:	82 b9       	out	0x02, r24	; 2
 108:	95 b9       	out	0x05, r25	; 5
 10a:	08 95       	ret

0000010c <SwitchRead>:

uint8_t SwitchRead(uint8_t pos)
{
    return ((1<<pos)&PINC);
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <SwitchRead+0xa>
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <SwitchRead+0x6>
 11a:	86 b1       	in	r24, 0x06	; 6
}
 11c:	82 23       	and	r24, r18
 11e:	08 95       	ret

00000120 <main>:

#include "ADtreiber.h"


int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <main+0x6>
 126:	1f 92       	push	r1
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
    uint8_t flagwarnblinker =0;
    uint8_t flagpowblinker =0;
    uint64_t powblinktimer=0;
    uint16_t opowled=0;
    
    initBoard();
 12c:	e6 df       	rcall	.-52     	; 0xfa <initBoard>
    uint8_t power=0;
    uint16_t owarnled =0;
    uint8_t flagwarnblinker =0;
    uint8_t flagpowblinker =0;
    uint64_t powblinktimer=0;
    uint16_t opowled=0;
 12e:	a1 2c       	mov	r10, r1
 130:	b1 2c       	mov	r11, r1
    uint64_t warnblinktimer=0;
    uint8_t power=0;
    uint16_t owarnled =0;
    uint8_t flagwarnblinker =0;
    uint8_t flagpowblinker =0;
    uint64_t powblinktimer=0;
 132:	61 2c       	mov	r6, r1
 134:	71 2c       	mov	r7, r1
 136:	81 2c       	mov	r8, r1
 138:	91 2c       	mov	r9, r1
 13a:	c1 2c       	mov	r12, r1
 13c:	d1 2c       	mov	r13, r1
 13e:	21 2c       	mov	r2, r1
 140:	31 2c       	mov	r3, r1
    #define PERIOD_POWTIME_ms  (ON_POWTIME_ms+OFF_POWTIME_ms)
    #define OMPLED           0x0001
       
    uint64_t warnblinktimer=0;
    uint8_t power=0;
    uint16_t owarnled =0;
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	19 82       	std	Y+1, r1	; 0x01
    #define ON_POWTIME_ms      100
    #define OFF_POWTIME_ms     100
    #define PERIOD_POWTIME_ms  (ON_POWTIME_ms+OFF_POWTIME_ms)
    #define OMPLED           0x0001
       
    uint64_t warnblinktimer=0;
 146:	e1 2c       	mov	r14, r1
 148:	f1 2c       	mov	r15, r1
 14a:	00 e0       	ldi	r16, 0x00	; 0
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	1c 82       	std	Y+4, r1	; 0x04
 150:	1b 82       	std	Y+3, r1	; 0x03
 152:	41 2c       	mov	r4, r1
 154:	51 2c       	mov	r5, r1
    
    initBoard();
    while (1) 
    {
//eingabe
        power=SwitchRead(0);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	d9 df       	rcall	.-78     	; 0x10c <SwitchRead>

//verarbeitung

        if (power)
 15a:	88 23       	and	r24, r24
 15c:	11 f0       	breq	.+4      	; 0x162 <main+0x42>
        {
            flagwarnblinker=1;
 15e:	e1 e0       	ldi	r30, 0x01	; 1
 160:	01 c0       	rjmp	.+2      	; 0x164 <main+0x44>
            flagpowblinker=1;
        } 
        else
        {
            flagwarnblinker=0;
 162:	e0 e0       	ldi	r30, 0x00	; 0
            flagpowblinker=0;
        }
        

        if (flagwarnblinker)
 164:	ee 23       	and	r30, r30
 166:	99 f1       	breq	.+102    	; 0x1ce <main+0xae>
        {
            if ((!warnblinktimer)||(warnblinktimer>=PERIOD_WARNTIME_ms))
 168:	2e 2d       	mov	r18, r14
 16a:	3f 2d       	mov	r19, r15
 16c:	40 2f       	mov	r20, r16
 16e:	51 2f       	mov	r21, r17
 170:	6c 81       	ldd	r22, Y+4	; 0x04
 172:	7b 81       	ldd	r23, Y+3	; 0x03
 174:	84 2d       	mov	r24, r4
 176:	95 2d       	mov	r25, r5
 178:	af ef       	ldi	r26, 0xFF	; 255
 17a:	a7 d0       	rcall	.+334    	; 0x2ca <__adddi3_s8>
 17c:	26 3e       	cpi	r18, 0xE6	; 230
 17e:	33 40       	sbci	r19, 0x03	; 3
 180:	41 05       	cpc	r20, r1
 182:	51 05       	cpc	r21, r1
 184:	61 05       	cpc	r22, r1
 186:	71 05       	cpc	r23, r1
 188:	81 05       	cpc	r24, r1
 18a:	91 05       	cpc	r25, r1
 18c:	69 f0       	breq	.+26     	; 0x1a8 <main+0x88>
 18e:	60 f0       	brcs	.+24     	; 0x1a8 <main+0x88>
            {
                owarnled=OMWLED;
 190:	8e ef       	ldi	r24, 0xFE	; 254
 192:	9f ef       	ldi	r25, 0xFF	; 255
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	89 83       	std	Y+1, r24	; 0x01
                warnblinktimer =0;
 198:	e1 2c       	mov	r14, r1
 19a:	f1 2c       	mov	r15, r1
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	1c 82       	std	Y+4, r1	; 0x04
 1a2:	1b 82       	std	Y+3, r1	; 0x03
 1a4:	41 2c       	mov	r4, r1
 1a6:	51 2c       	mov	r5, r1
            }
            if ((warnblinktimer>=ON_WARNTIME_ms))
 1a8:	2e 2d       	mov	r18, r14
 1aa:	3f 2d       	mov	r19, r15
 1ac:	40 2f       	mov	r20, r16
 1ae:	51 2f       	mov	r21, r17
 1b0:	6c 81       	ldd	r22, Y+4	; 0x04
 1b2:	7b 81       	ldd	r23, Y+3	; 0x03
 1b4:	84 2d       	mov	r24, r4
 1b6:	95 2d       	mov	r25, r5
 1b8:	23 3f       	cpi	r18, 0xF3	; 243
 1ba:	31 40       	sbci	r19, 0x01	; 1
 1bc:	41 05       	cpc	r20, r1
 1be:	51 05       	cpc	r21, r1
 1c0:	61 05       	cpc	r22, r1
 1c2:	71 05       	cpc	r23, r1
 1c4:	81 05       	cpc	r24, r1
 1c6:	91 05       	cpc	r25, r1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <main+0xac>
 1ca:	90 f4       	brcc	.+36     	; 0x1f0 <main+0xd0>
 1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <main+0xd4>
                owarnled=0;
            }
        } 
        else
        {
            owarnled=0;
 1ce:	1a 82       	std	Y+2, r1	; 0x02
 1d0:	19 82       	std	Y+1, r1	; 0x01
            warnblinktimer=PERIOD_WARNTIME_ms;
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f8 ee       	ldi	r31, 0xE8	; 232
 1d6:	ef 2e       	mov	r14, r31
 1d8:	f0 2d       	mov	r31, r0
 1da:	0f 2e       	mov	r0, r31
 1dc:	f3 e0       	ldi	r31, 0x03	; 3
 1de:	ff 2e       	mov	r15, r31
 1e0:	f0 2d       	mov	r31, r0
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	1c 82       	std	Y+4, r1	; 0x04
 1e8:	1b 82       	std	Y+3, r1	; 0x03
 1ea:	41 2c       	mov	r4, r1
 1ec:	51 2c       	mov	r5, r1
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <main+0xd4>
                owarnled=OMWLED;
                warnblinktimer =0;
            }
            if ((warnblinktimer>=ON_WARNTIME_ms))
            {
                owarnled=0;
 1f0:	1a 82       	std	Y+2, r1	; 0x02
 1f2:	19 82       	std	Y+1, r1	; 0x01
        {
            owarnled=0;
            warnblinktimer=PERIOD_WARNTIME_ms;
        }
        
        if (flagpowblinker)
 1f4:	ee 23       	and	r30, r30
 1f6:	61 f1       	breq	.+88     	; 0x250 <main+0x130>
        {
            if ((!powblinktimer)||(powblinktimer>=PERIOD_POWTIME_ms))
 1f8:	26 2d       	mov	r18, r6
 1fa:	37 2d       	mov	r19, r7
 1fc:	48 2d       	mov	r20, r8
 1fe:	59 2d       	mov	r21, r9
 200:	6c 2d       	mov	r22, r12
 202:	7d 2d       	mov	r23, r13
 204:	82 2d       	mov	r24, r2
 206:	93 2d       	mov	r25, r3
 208:	af ef       	ldi	r26, 0xFF	; 255
 20a:	5f d0       	rcall	.+190    	; 0x2ca <__adddi3_s8>
 20c:	26 3c       	cpi	r18, 0xC6	; 198
 20e:	31 05       	cpc	r19, r1
 210:	41 05       	cpc	r20, r1
 212:	51 05       	cpc	r21, r1
 214:	61 05       	cpc	r22, r1
 216:	71 05       	cpc	r23, r1
 218:	81 05       	cpc	r24, r1
 21a:	91 05       	cpc	r25, r1
 21c:	61 f0       	breq	.+24     	; 0x236 <main+0x116>
 21e:	58 f0       	brcs	.+22     	; 0x236 <main+0x116>
            {
                opowled=OMPLED;
 220:	aa 24       	eor	r10, r10
 222:	a3 94       	inc	r10
 224:	b1 2c       	mov	r11, r1
                powblinktimer =0;
 226:	61 2c       	mov	r6, r1
 228:	71 2c       	mov	r7, r1
 22a:	81 2c       	mov	r8, r1
 22c:	91 2c       	mov	r9, r1
 22e:	c1 2c       	mov	r12, r1
 230:	d1 2c       	mov	r13, r1
 232:	21 2c       	mov	r2, r1
 234:	31 2c       	mov	r3, r1
            }
            if ((powblinktimer>=ON_POWTIME_ms))
 236:	26 2d       	mov	r18, r6
 238:	37 2d       	mov	r19, r7
 23a:	48 2d       	mov	r20, r8
 23c:	59 2d       	mov	r21, r9
 23e:	6c 2d       	mov	r22, r12
 240:	7d 2d       	mov	r23, r13
 242:	82 2d       	mov	r24, r2
 244:	93 2d       	mov	r25, r3
 246:	a3 e6       	ldi	r26, 0x63	; 99
 248:	4c d0       	rcall	.+152    	; 0x2e2 <__cmpdi2_s8>
 24a:	09 f0       	breq	.+2      	; 0x24e <main+0x12e>
 24c:	78 f4       	brcc	.+30     	; 0x26c <main+0x14c>
 24e:	10 c0       	rjmp	.+32     	; 0x270 <main+0x150>
                opowled=0;
            }
        }
        else
        {
            opowled=0;
 250:	a1 2c       	mov	r10, r1
 252:	b1 2c       	mov	r11, r1
            powblinktimer=PERIOD_POWTIME_ms;
 254:	0f 2e       	mov	r0, r31
 256:	f8 ec       	ldi	r31, 0xC8	; 200
 258:	6f 2e       	mov	r6, r31
 25a:	f0 2d       	mov	r31, r0
 25c:	71 2c       	mov	r7, r1
 25e:	81 2c       	mov	r8, r1
 260:	91 2c       	mov	r9, r1
 262:	c1 2c       	mov	r12, r1
 264:	d1 2c       	mov	r13, r1
 266:	21 2c       	mov	r2, r1
 268:	31 2c       	mov	r3, r1
 26a:	02 c0       	rjmp	.+4      	; 0x270 <main+0x150>
                opowled=OMPLED;
                powblinktimer =0;
            }
            if ((powblinktimer>=ON_POWTIME_ms))
            {
                opowled=0;
 26c:	a1 2c       	mov	r10, r1
            powblinktimer=PERIOD_POWTIME_ms;
        }


//ausgabe
        ledWriteAll(owarnled|opowled);
 26e:	b1 2c       	mov	r11, r1
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	9a 81       	ldd	r25, Y+2	; 0x02
 274:	8a 29       	or	r24, r10
 276:	9b 29       	or	r25, r11
 278:	46 df       	rcall	.-372    	; 0x106 <ledWriteAll>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27a:	80 e4       	ldi	r24, 0x40	; 64
 27c:	9c e9       	ldi	r25, 0x9C	; 156
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0x15e>

//systemzeit
        _delay_ms(10);
        warnblinktimer = warnblinktimer+10;
 282:	2e 2d       	mov	r18, r14
 284:	3f 2d       	mov	r19, r15
 286:	40 2f       	mov	r20, r16
 288:	51 2f       	mov	r21, r17
 28a:	6c 81       	ldd	r22, Y+4	; 0x04
 28c:	7b 81       	ldd	r23, Y+3	; 0x03
 28e:	84 2d       	mov	r24, r4
 290:	95 2d       	mov	r25, r5
 292:	aa e0       	ldi	r26, 0x0A	; 10
 294:	1a d0       	rcall	.+52     	; 0x2ca <__adddi3_s8>
 296:	e2 2e       	mov	r14, r18
 298:	f3 2e       	mov	r15, r19
 29a:	04 2f       	mov	r16, r20
 29c:	15 2f       	mov	r17, r21
 29e:	6c 83       	std	Y+4, r22	; 0x04
 2a0:	7b 83       	std	Y+3, r23	; 0x03
 2a2:	48 2e       	mov	r4, r24
 2a4:	59 2e       	mov	r5, r25
        powblinktimer = powblinktimer+10;
 2a6:	26 2d       	mov	r18, r6
 2a8:	37 2d       	mov	r19, r7
 2aa:	48 2d       	mov	r20, r8
 2ac:	59 2d       	mov	r21, r9
 2ae:	6c 2d       	mov	r22, r12
 2b0:	7d 2d       	mov	r23, r13
 2b2:	82 2d       	mov	r24, r2
 2b4:	93 2d       	mov	r25, r3
 2b6:	09 d0       	rcall	.+18     	; 0x2ca <__adddi3_s8>
 2b8:	62 2e       	mov	r6, r18
 2ba:	73 2e       	mov	r7, r19
 2bc:	84 2e       	mov	r8, r20
 2be:	95 2e       	mov	r9, r21
 2c0:	c6 2e       	mov	r12, r22
 2c2:	d7 2e       	mov	r13, r23
 2c4:	28 2e       	mov	r2, r24
 2c6:	39 2e       	mov	r3, r25
    }        
 2c8:	46 cf       	rjmp	.-372    	; 0x156 <main+0x36>

000002ca <__adddi3_s8>:
 2ca:	00 24       	eor	r0, r0
 2cc:	a7 fd       	sbrc	r26, 7
 2ce:	00 94       	com	r0
 2d0:	2a 0f       	add	r18, r26
 2d2:	30 1d       	adc	r19, r0
 2d4:	40 1d       	adc	r20, r0
 2d6:	50 1d       	adc	r21, r0
 2d8:	60 1d       	adc	r22, r0
 2da:	70 1d       	adc	r23, r0
 2dc:	80 1d       	adc	r24, r0
 2de:	90 1d       	adc	r25, r0
 2e0:	08 95       	ret

000002e2 <__cmpdi2_s8>:
 2e2:	00 24       	eor	r0, r0
 2e4:	a7 fd       	sbrc	r26, 7
 2e6:	00 94       	com	r0
 2e8:	2a 17       	cp	r18, r26
 2ea:	30 05       	cpc	r19, r0
 2ec:	40 05       	cpc	r20, r0
 2ee:	50 05       	cpc	r21, r0
 2f0:	60 05       	cpc	r22, r0
 2f2:	70 05       	cpc	r23, r0
 2f4:	80 05       	cpc	r24, r0
 2f6:	90 05       	cpc	r25, r0
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
